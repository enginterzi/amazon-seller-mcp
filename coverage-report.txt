
> amazon-seller-mcp@0.1.0 test
> vitest run --run --coverage


 RUN  v3.2.4 /Users/eterzi/kiro-projects/amazon-seller-mcp
      Coverage enabled with v8

 ✓ tests/utils/mock-factories/api-client-factory.test.ts > BaseApiClientMockFactory > create > should create a mock base API client with required methods 1ms 17 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > BaseApiClientMockFactory > create > should setup default behaviors 1ms 17 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > BaseApiClientMockFactory > create > should allow custom default response 0ms 17 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > BaseApiClientMockFactory > mockSuccess > should configure successful response for a method 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > BaseApiClientMockFactory > mockSuccess > should configure successful response with custom status code 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > BaseApiClientMockFactory > mockSuccess > should configure one-time successful response 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > BaseApiClientMockFactory > mockError > should configure error response for a method 1ms 18 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > BaseApiClientMockFactory > mockError > should configure one-time error response 1ms 18 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > BaseApiClientMockFactory > mockSequence > should configure sequence of responses 1ms 18 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > BaseApiClientMockFactory > resetClient > should reset all mocks in a client 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > CatalogClientMockFactory > create > should create a mock catalog client with all methods 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > CatalogClientMockFactory > create > should setup default behaviors 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > CatalogClientMockFactory > mockGetCatalogItem > should mock successful catalog item retrieval 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > CatalogClientMockFactory > mockSearchCatalogItems > should mock successful catalog search 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > CatalogClientMockFactory > mockSearchCatalogItems > should mock search with pagination 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > ListingsClientMockFactory > create > should create a mock listings client with all methods 0ms 19 MB heap used
 × tests/utils/mock-factories/api-client-factory.test.ts > ListingsClientMockFactory > create > should setup default behaviors 2ms 19 MB heap used
   → expected { listings: [], nextToken: null } to deeply equal []
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > ListingsClientMockFactory > mockGetListing > should mock successful listing retrieval 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > ListingsClientMockFactory > mockPutListing > should mock successful listing creation 1ms 19 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > InventoryClientMockFactory > create > should create a mock inventory client with all methods 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > InventoryClientMockFactory > create > should setup default behaviors 0ms 20 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > InventoryClientMockFactory > mockGetInventory > should mock successful inventory retrieval 0ms 20 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > InventoryClientMockFactory > mockUpdateInventory > should mock successful inventory update 0ms 20 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > OrdersClientMockFactory > create > should create a mock orders client with all methods 0ms 20 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > OrdersClientMockFactory > create > should setup default behaviors 1ms 20 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > OrdersClientMockFactory > mockGetOrder > should mock successful order retrieval 1ms 20 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > OrdersClientMockFactory > mockGetOrders > should mock successful orders list retrieval 0ms 21 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > ReportsClientMockFactory > create > should create a mock reports client with all methods 0ms 21 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > ReportsClientMockFactory > create > should setup default behaviors 0ms 21 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > ReportsClientMockFactory > mockRequestReport > should mock successful report request 0ms 21 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > ReportsClientMockFactory > mockGetReport > should mock successful report retrieval 1ms 21 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > ApiResponseBuilders > success > should create a successful API response 0ms 21 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > ApiResponseBuilders > success > should create a successful API response with custom status code 0ms 21 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > ApiResponseBuilders > paginated > should create a paginated response without next token 0ms 21 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > ApiResponseBuilders > paginated > should create a paginated response with next token 0ms 22 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > ApiResponseBuilders > submission > should create a submission response with default status 0ms 22 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > ApiResponseBuilders > submission > should create a submission response with custom status 0ms 22 MB heap used
 ✓ tests/utils/mock-factories/api-client-factory.test.ts > ApiResponseBuilders > empty > should create an empty response 0ms 22 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > create > should create a mock Amazon Auth with all required methods 2ms 18 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > create > should setup default behaviors 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > create > should allow custom default configuration 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > create > should allow disabling default setup 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockGetAccessToken > should configure successful token retrieval 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockGetAccessToken > should configure one-time token retrieval 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockRefreshAccessToken > should configure successful token refresh 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockRefreshAccessToken > should configure one-time token refresh 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockSignRequest > should configure successful request signing 1ms 19 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockSignRequest > should configure request signing with additional headers 1ms 19 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockGenerateSecuredRequest > should configure successful secured request generation 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockGenerateSecuredRequest > should configure secured request with additional headers 1ms 19 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockAuthError > should configure authentication error 1ms 19 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockAuthError > should configure one-time authentication error 1ms 19 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockTokenExpiration > should configure token expiration scenario 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockTokenExpiration > should configure token expiration with refresh delay 102ms 12 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockAuthSequence > should configure sequence of token responses 0ms 12 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockAuthSequence > should configure sequence of refresh responses 0ms 13 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > resetAuth > should reset all mocks in an auth instance 0ms 13 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockInvalidClientError > should configure invalid_client error for all auth methods 0ms 13 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockInvalidClientError > should include proper error details for invalid_client 0ms 13 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockAuthRecovery > should simulate authentication recovery after failures 0ms 13 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AmazonAuthMockFactory > mockAuthRecovery > should use default values when no options provided 0ms 13 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > CredentialManagerMockFactory > create > should create a mock credential manager with all methods 0ms 13 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > CredentialManagerMockFactory > create > should setup default behaviors 0ms 14 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > CredentialManagerMockFactory > mockLoadCredentials > should mock successful credential loading 0ms 14 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > CredentialManagerMockFactory > mockValidateCredentials > should mock credential validation 0ms 14 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AuthMockScenarios > validAuth > should create valid authentication scenario 0ms 14 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AuthMockScenarios > validAuth > should create valid authentication scenario with default token 0ms 14 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AuthMockScenarios > expiredToken > should create expired token scenario 0ms 14 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AuthMockScenarios > error scenarios > should create refresh failure scenario 0ms 14 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AuthMockScenarios > error scenarios > should create invalid credentials scenario 0ms 14 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AuthMockScenarios > error scenarios > should create network error scenario 0ms 14 MB heap used
 ✓ tests/utils/mock-factories/auth-factory.test.ts > AuthMockScenarios > error scenarios > should create rate limit error scenario 0ms 14 MB heap used
stdout | tests/unit/api/base-client.test.ts > BaseApiClient > should handle authentication failures gracefully
2025-08-06T01:14:52.458Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should deliver inventory change notifications immediately when debouncing is disabled
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notifications.test.ts > NotificationManager > should send inventory change notification through MCP server
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should deliver order status change notifications immediately when debouncing is disabled
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/api/base-client.test.ts > BaseApiClient > should handle network errors and convert them to API errors
2025-08-06T01:14:52.463Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/unit/server/notifications.test.ts > NotificationManager > should send order status change notification through MCP server
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should debounce inventory change notifications for the same SKU
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should debounce inventory change notifications for the same SKU
Notification manager initialized (debounced: true, debounceTime: 100ms)

stdout | tests/unit/api/base-client.test.ts > BaseApiClient > should handle HTTP error responses and extract error details
2025-08-06T01:14:52.465Z [[31merror[39m]: Validation error
{
  "errorType": "VALIDATION_ERROR",
  "errorCode": "VALIDATION_ERROR",
  "errorDetails": {
    "errors": [
      {
        "code": "InvalidInput",
        "message": "One or more request parameters is invalid"
      }
    ]
  }
}

stdout | tests/unit/server/notifications.test.ts > NotificationManager > should notify event listeners when notifications are sent
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/api/base-client.test.ts > BaseApiClient > should respect maxRetries parameter and fail after exhausting retries
2025-08-06T01:14:52.468Z [[31merror[39m]: Server error
{
  "statusCode": 500,
  "errorType": "SERVER_ERROR",
  "errorCode": "SERVER_ERROR",
  "errorDetails": {
    "error": "Internal Server Error"
  }
}

stdout | tests/unit/api/base-client.test.ts > BaseApiClient > should respect maxRetries parameter and fail after exhausting retries
2025-08-06T01:14:52.468Z [[32minfo[39m]: Retrying operation after error (attempt 1/2)
{
  "errorMessage": "Server error: API request failed: Request failed with status code 500",
  "errorName": "ServerError",
  "delayMs": 1102.6705779391127,
  "retryCount": 1,
  "maxRetries": 2
}

stdout | tests/unit/tools/orders-tools-fulfill.test.ts > Fulfill Order Tool > should handle fulfill order tool execution
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/unit/tools/orders-tools-update-status.test.ts > Update Order Status Tool > should handle update order status tool execution for CANCELED status
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should retry network errors with exponential backoff
2025-08-06T01:14:52.471Z [[31merror[39m]: Network error
{
  "errorType": "NETWORK_ERROR",
  "errorCode": "NETWORK_ERROR"
}

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should retry network errors with exponential backoff
2025-08-06T01:14:52.472Z [[32minfo[39m]: Retrying operation after error (attempt 1/3)
{
  "errorMessage": "Network error: API request failed: Connection failed",
  "errorName": "NetworkError",
  "delayMs": 1140.7617061886212,
  "retryCount": 1,
  "maxRetries": 3
}

stdout | tests/unit/tools/orders-tools-fulfill.test.ts > Fulfill Order Tool > should validate ship date format
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should handle process order tool execution for CONFIRM action
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/unit/tools/orders-tools-update-status.test.ts > Update Order Status Tool > should handle update order status tool execution for UNSHIPPED status
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/unit/server/notifications.test.ts > NotificationManager > should debounce notifications when enabled
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notifications.test.ts > NotificationManager > should debounce notifications when enabled
Notification manager initialized (debounced: true, debounceTime: 100ms)

stdout | tests/unit/tools/orders-tools-update-status.test.ts > Update Order Status Tool > should reject unsupported status updates
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/unit/tools/ai-tools.test.ts > AI Tools > should register the generate-product-description tool
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should handle process order tool execution for CANCEL action
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/unit/tools/ai-tools.test.ts > AI Tools > should register the optimize-listing tool
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/unit/tools/orders-tools-fulfill.test.ts > Fulfill Order Tool > should handle failed order fulfillment
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/unit/tools/ai-tools.test.ts > AI Tools > should generate optimized product descriptions for given product details
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should handle process order tool execution for SHIP action
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/unit/tools/orders-tools-fulfill.test.ts > Fulfill Order Tool > should handle errors when fulfilling an order
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/unit/tools/ai-tools.test.ts > AI Tools > should handle errors when generating a product description
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/unit/tools/ai-tools.test.ts > AI Tools > should retrieve the listing and call the LLM to optimize it
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test
Registering resources
Registering catalog resources

stdout | tests/unit/tools/orders-tools-update-status.test.ts > Update Order Status Tool > should handle errors when updating order status
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should validate CANCEL action requires cancellation reason
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registering listings resources

 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle token refresh failures gracefully 4ms 22 MB heap used
   → expected { data: {}, statusCode: 200, …(1) } to be an instance of AuthError
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle request signing failures gracefully 1ms 22 MB heap used
   → expected { data: {}, statusCode: 200, …(1) } to be an instance of AuthError
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle connection timeouts appropriately 3ms 23 MB heap used
   → expected { data: {}, statusCode: 200, …(1) } to be an instance of ApiError
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle connection refused errors appropriately 1ms 23 MB heap used
   → expected { data: {}, statusCode: 200, …(1) } to be an instance of ApiError
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle 400 Bad Request errors with validation details 1ms 24 MB heap used
   → expected { data: {}, statusCode: 200, …(1) } to be an instance of ApiError
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle 401 Unauthorized errors appropriately 0ms 24 MB heap used
   → expected { data: {}, statusCode: 200, …(1) } to be an instance of ApiError
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle 403 Forbidden errors appropriately 1ms 25 MB heap used
   → expected { data: {}, statusCode: 200, …(1) } to be an instance of ApiError
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle 429 Rate Limit errors with retry information 2ms 26 MB heap used
   → expected { data: {}, statusCode: 200, …(1) } to be an instance of ApiError
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle 500 Server errors appropriately 1ms 26 MB heap used
   → expected { data: {}, statusCode: 200, …(1) } to be an instance of ApiError
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should retry server errors until success 7ms 24 MB heap used
   → expected "spy" to be called at least once
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should retry rate limit errors with backoff 1ms 24 MB heap used
   → expected "spy" to be called at least once
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should not retry client errors 2ms 25 MB heap used
   → promise resolved "{ data: {}, statusCode: 200, …(1) }" instead of rejecting
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should respect custom maxRetries configuration 1ms 26 MB heap used
   → promise resolved "{ data: {}, statusCode: 200, …(1) }" instead of rejecting
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should parse and handle rate limit headers correctly 2ms 26 MB heap used
   → expected {} to match object { success: true }
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle catalog item not found errors gracefully 0ms 27 MB heap used
   → catalogClient.getCatalogItem is not a function
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should validate inventory update parameters before making requests 0ms 27 MB heap used
   → inventoryClient.updateInventory is not a function
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should validate listing creation parameters before making requests 0ms 28 MB heap used
   → listingsClient.putListing is not a function
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle listing not found scenarios appropriately 0ms 28 MB heap used
   → listingsClient.getListing is not a function
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should validate order shipping details before processing 0ms 29 MB heap used
   → ordersClient.updateOrderStatus is not a function
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should validate order cancellation details before processing 1ms 29 MB heap used
   → ordersClient.updateOrderStatus is not a function
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should validate report creation parameters before making requests 0ms 30 MB heap used
   → MockFactoryRegistry.resetAll is not a function
 × tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle report download failures gracefully 1ms 30 MB heap used
   → MockFactoryRegistry.resetAll is not a function
stdout | tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should validate SHIP action requires shipping details
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should handle failed order processing
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should handle errors when processing an order
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registered resource 'amazon-listings'
Registered listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registering inventory resources

 × tests/unit/tools/orders-tools-update-status.test.ts > Update Order Status Tool > should handle update order status tool execution for CANCELED status 7ms 26 MB heap used
   → expected '# Amazon Order ORDER-123\n\n**Status:…' to contain '**Order ID:** 123-4567890-1234567'
 × tests/unit/tools/orders-tools-update-status.test.ts > Update Order Status Tool > should handle update order status tool execution for UNSHIPPED status 2ms 27 MB heap used
   → expected '# Amazon Order ORDER-123\n\n**Status:…' to contain '**Order ID:** 123-4567890-1234567'
 × tests/unit/tools/orders-tools-update-status.test.ts > Update Order Status Tool > should reject unsupported status updates 2ms 28 MB heap used
   → expected undefined to be true // Object.is equality
 × tests/unit/tools/orders-tools-update-status.test.ts > Update Order Status Tool > should handle errors when updating order status 5ms 25 MB heap used
   → expected undefined to be true // Object.is equality
 × tests/unit/tools/orders-tools-fulfill.test.ts > Fulfill Order Tool > should handle fulfill order tool execution 8ms 25 MB heap used
   → expected '# Order Processing Result\n\n**Order …' to contain 'Order 123-4567890-1234567 has been fu…'
 × tests/unit/tools/orders-tools-fulfill.test.ts > Fulfill Order Tool > should validate ship date format 7ms 23 MB heap used
   → expected undefined to be true // Object.is equality
 ✓ tests/unit/tools/orders-tools-fulfill.test.ts > Fulfill Order Tool > should handle failed order fulfillment 1ms 24 MB heap used
 × tests/unit/tools/orders-tools-fulfill.test.ts > Fulfill Order Tool > should handle errors when fulfilling an order 1ms 25 MB heap used
   → expected 'Error processing order: API error' to contain 'Error fulfilling order: API error'
stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registering orders resources

stdout | tests/unit/utils/error-handler.test.ts > translateApiError > should translate AUTH_ERROR with status 401 to AuthenticationError
2025-08-06T01:14:52.503Z [[31merror[39m]: Authentication error
{
  "statusCode": 401,
  "errorType": "AUTH_ERROR",
  "errorCode": "AUTHENTICATION_ERROR",
  "errorDetails": {
    "error": "invalid_token"
  }
}

stdout | tests/unit/utils/error-handler.test.ts > translateApiError > should translate AUTH_ERROR with status 403 to AuthorizationError
2025-08-06T01:14:52.504Z [[31merror[39m]: Authorization error
{
  "statusCode": 403,
  "errorType": "AUTH_ERROR",
  "errorCode": "AUTHORIZATION_ERROR",
  "errorDetails": {
    "error": "insufficient_permissions"
  }
}

stdout | tests/unit/utils/error-handler.test.ts > translateApiError > should translate VALIDATION_ERROR to ValidationError
2025-08-06T01:14:52.505Z [[31merror[39m]: Validation error
{
  "errorType": "VALIDATION_ERROR",
  "errorCode": "VALIDATION_ERROR",
  "errorDetails": {
    "errors": [
      "Invalid SKU"
    ]
  }
}

stdout | tests/unit/utils/error-handler.test.ts > translateApiError > should translate RATE_LIMIT_EXCEEDED to RateLimitExceededError
2025-08-06T01:14:52.506Z [[33mwarn[39m]: Rate limit exceeded
{
  "errorType": "RATE_LIMIT_EXCEEDED",
  "errorCode": "RATE_LIMIT_EXCEEDED",
  "retryAfterMs": 5000,
  "errorDetails": {
    "headers": {
      "retry-after": "5"
    }
  }
}

stdout | tests/unit/utils/error-handler.test.ts > translateApiError > should translate SERVER_ERROR to ServerError
2025-08-06T01:14:52.506Z [[31merror[39m]: Server error
{
  "statusCode": 500,
  "errorType": "SERVER_ERROR",
  "errorCode": "SERVER_ERROR",
  "errorDetails": {
    "error": "server_error"
  }
}

stdout | tests/unit/utils/error-handler.test.ts > translateApiError > should translate NETWORK_ERROR to NetworkError
2025-08-06T01:14:52.506Z [[31merror[39m]: Network error
{
  "errorType": "NETWORK_ERROR",
  "errorCode": "NETWORK_ERROR",
  "errorDetails": {
    "error": "connection_failed"
  }
}

stdout | tests/unit/utils/error-handler.test.ts > translateApiError > should translate CLIENT_ERROR with status 404 to ResourceNotFoundError
2025-08-06T01:14:52.506Z [[33mwarn[39m]: Resource not found
{
  "statusCode": 404,
  "errorType": "CLIENT_ERROR",
  "errorCode": "RESOURCE_NOT_FOUND",
  "errorDetails": {
    "error": "not_found"
  }
}

stdout | tests/unit/utils/error-handler.test.ts > translateApiError > should translate CLIENT_ERROR with status 429 to ThrottlingError
2025-08-06T01:14:52.507Z [[33mwarn[39m]: Throttling error
{
  "statusCode": 429,
  "errorType": "CLIENT_ERROR",
  "errorCode": "THROTTLING_ERROR",
  "retryAfterMs": 10000,
  "errorDetails": {
    "code": "QuotaExceeded",
    "headers": {
      "retry-after": "10"
    }
  }
}

stdout | tests/unit/utils/error-handler.test.ts > RetryRecoveryStrategy > should recover from recoverable errors
2025-08-06T01:14:52.507Z [[32minfo[39m]: Retrying operation after error (attempt 2/3)
{
  "errorMessage": "Network error",
  "errorName": "NetworkError",
  "delayMs": 249.7968834594228,
  "retryCount": 2,
  "maxRetries": 3
}

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registered resource 'amazon-orders'
Registered resource 'amazon-order-action'
Registered resource 'amazon-order-filter'
Registered orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registering reports resources

 × tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should handle process order tool execution for CONFIRM action 6ms 27 MB heap used
   → expected '# Amazon Orders\n\n**Total Orders:** …' to contain '**Order ID:** 123-4567890-1234567'
 × tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should handle process order tool execution for CANCEL action 2ms 28 MB heap used
   → expected '# Amazon Orders\n\n**Total Orders:** …' to contain '**Order ID:** 123-4567890-1234567'
 × tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should handle process order tool execution for SHIP action 7ms 25 MB heap used
   → expected '# Amazon Orders\n\n**Total Orders:** …' to contain '**Order ID:** 123-4567890-1234567'
 × tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should validate CANCEL action requires cancellation reason 3ms 26 MB heap used
   → expected undefined to be true // Object.is equality
 × tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should validate SHIP action requires shipping details 1ms 27 MB heap used
   → expected undefined to be true // Object.is equality
 × tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should handle failed order processing 1ms 28 MB heap used
   → expected '# Amazon Orders\n\n**Total Orders:** …' to contain '**Order ID:** 123-4567890-1234567'
 × tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should handle errors when processing an order 2ms 29 MB heap used
   → expected undefined to be true // Object.is equality
stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registered resource 'amazon-reports'
Registered resource 'amazon-report-action'
Registered resource 'amazon-report-filter'
Registered reports resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registering tools
Registering catalog tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registering listings tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registering inventory tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Inventory change notifications set up
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registering orders tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Periodic order monitoring is disabled
Order status change notifications set up
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registering reports tools

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-mcp-server v1.0.0-integration

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registering resources
Registering catalog resources

 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should successfully make GET requests with proper authentication 11ms 24 MB heap used
 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should successfully make POST requests with data 2ms 24 MB heap used
 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should properly handle query parameters in requests 4ms 22 MB heap used
 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should extract and return rate limit information from response headers 2ms 22 MB heap used
 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should handle authentication failures gracefully 3ms 23 MB heap used
 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should handle network errors and convert them to API errors 4ms 23 MB heap used
 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should handle HTTP error responses and extract error details 1ms 24 MB heap used
 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should retry requests on server errors and eventually succeed 1ms 24 MB heap used
stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registering AI-assisted tools

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registering listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Connecting to stdio transport

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
STDIO transport initialized
Server connected successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registered resource 'amazon-listings'
Registered listings resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registering inventory resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registering orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
2025-08-06T01:14:52.540Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registered resource 'amazon-orders'
Registered resource 'amazon-order-action'
Registered resource 'amazon-order-filter'
Registered orders resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registering reports resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registered resource 'amazon-reports'
Registered resource 'amazon-report-action'
Registered resource 'amazon-report-filter'
Registered reports resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registering tools
Registering catalog tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
2025-08-06T01:14:52.542Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stderr | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Could not get current inventory for SKU HEADPHONES-001: Unknown error: API request failed: Failed to refresh access token: (0 , __vite_ssr_import_0__.default) is not a function

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
2025-08-06T01:14:52.543Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
2025-08-06T01:14:52.543Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Closing server

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
Server closed successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registering listings tools

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registering inventory tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test
Registering resources
Registering catalog resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registering listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registered resource 'amazon-listings'
Registered listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registering inventory resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registering orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registered resource 'amazon-orders'
Registered resource 'amazon-order-action'
Registered resource 'amazon-order-filter'
Registered orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registering reports resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registered resource 'amazon-reports'
Registered resource 'amazon-report-action'
Registered resource 'amazon-report-filter'
Registered reports resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registering tools
Registering catalog tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registering listings tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registering inventory tools

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Inventory change notifications set up
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Inventory change notifications set up
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registering orders tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registering orders tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Periodic order monitoring is disabled
Order status change notifications set up
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registering reports tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registering AI-assisted tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Connecting to stdio transport

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
STDIO transport initialized
Server connected successfully

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
2025-08-06T01:14:52.550Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Periodic order monitoring is disabled
Order status change notifications set up
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registering reports tools

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registering AI-assisted tools

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Connecting to stdio transport

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
STDIO transport initialized
Server connected successfully

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
2025-08-06T01:14:52.550Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
2025-08-06T01:14:52.554Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
2025-08-06T01:14:52.554Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stderr | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Could not get current inventory for SKU TEST-SKU-ORDER: Unknown error: API request failed: Failed to refresh access token: (0 , __vite_ssr_import_0__.default) is not a function

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
2025-08-06T01:14:52.554Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Closing server

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
Server closed successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Closing server

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization
Server closed successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide catalog search functionality through registered tools
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-mcp-server v1.0.0-integration

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide catalog search functionality through registered tools
Registering catalog resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide catalog search functionality through registered tools
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide catalog search functionality through registered tools
Registering catalog tools

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide catalog search functionality through registered tools
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide catalog search functionality through registered tools
Connecting to stdio transport

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide catalog search functionality through registered tools
STDIO transport initialized
Server connected successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide catalog search functionality through registered tools
Closing server

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide catalog search functionality through registered tools
Server closed successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support complete listing management workflow from creation to updates
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-mcp-server v1.0.0-integration

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support complete listing management workflow from creation to updates
Registering listings resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support complete listing management workflow from creation to updates
Registered resource 'amazon-listings'
Registered listings resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support complete listing management workflow from creation to updates
Registering listings tools

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support complete listing management workflow from creation to updates
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support complete listing management workflow from creation to updates
Connecting to stdio transport

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support complete listing management workflow from creation to updates
STDIO transport initialized
Server connected successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support complete listing management workflow from creation to updates
Closing server

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support complete listing management workflow from creation to updates
Server closed successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable inventory management through query and update operations
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-mcp-server v1.0.0-integration

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable inventory management through query and update operations
Registering inventory resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable inventory management through query and update operations
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable inventory management through query and update operations
Registering inventory tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test
Registering resources
Registering catalog resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registering listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registered resource 'amazon-listings'
Registered listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registering inventory resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registering orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registered resource 'amazon-orders'
Registered resource 'amazon-order-action'
Registered resource 'amazon-order-filter'
Registered orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registering reports resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registered resource 'amazon-reports'
Registered resource 'amazon-report-action'
Registered resource 'amazon-report-filter'
Registered reports resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registering tools
Registering catalog tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registering listings tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registering inventory tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Inventory change notifications set up
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registering orders tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Periodic order monitoring is disabled
Order status change notifications set up
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registering reports tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registering AI-assisted tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Connecting to stdio transport

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
STDIO transport initialized
Server connected successfully

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
2025-08-06T01:14:52.559Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Closing server

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
Server closed successfully

 ✓ tests/unit/server/notifications.test.ts > NotificationManager > should send inventory change notification through MCP server 5ms 24 MB heap used
 ✓ tests/unit/server/notifications.test.ts > NotificationManager > should send order status change notification through MCP server 1ms 25 MB heap used
 ✓ tests/unit/server/notifications.test.ts > NotificationManager > should notify event listeners when notifications are sent 12ms 26 MB heap used
stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable inventory management through query and update operations
Inventory change notifications set up
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable inventory management through query and update operations
Connecting to stdio transport

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable inventory management through query and update operations
STDIO transport initialized
Server connected successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable inventory management through query and update operations
Closing server

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable inventory management through query and update operations
Server closed successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support order processing workflow from retrieval to status updates
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-mcp-server v1.0.0-integration

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support order processing workflow from retrieval to status updates
Registering orders resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support order processing workflow from retrieval to status updates
Registered resource 'amazon-orders'
Registered resource 'amazon-order-action'
Registered resource 'amazon-order-filter'
Registered orders resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support order processing workflow from retrieval to status updates
Registering orders tools

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support order processing workflow from retrieval to status updates
Periodic order monitoring is disabled
Order status change notifications set up
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support order processing workflow from retrieval to status updates
Connecting to stdio transport

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support order processing workflow from retrieval to status updates
STDIO transport initialized
Server connected successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support order processing workflow from retrieval to status updates
Closing server

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support order processing workflow from retrieval to status updates
Server closed successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable report generation and retrieval workflow for business analytics
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-mcp-server v1.0.0-integration

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable report generation and retrieval workflow for business analytics
Registering reports resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable report generation and retrieval workflow for business analytics
Registered resource 'amazon-reports'
Registered resource 'amazon-report-action'
Registered resource 'amazon-report-filter'
Registered reports resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable report generation and retrieval workflow for business analytics
Registering reports tools

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable report generation and retrieval workflow for business analytics
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable report generation and retrieval workflow for business analytics
Connecting to stdio transport

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable report generation and retrieval workflow for business analytics
STDIO transport initialized
Server connected successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable report generation and retrieval workflow for business analytics
Closing server

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable report generation and retrieval workflow for business analytics
Server closed successfully

 ✓ tests/unit/server/notification-delivery.test.ts > Notification Delivery > should deliver inventory change notifications immediately when debouncing is disabled 3ms 25 MB heap used
 ✓ tests/unit/server/notification-delivery.test.ts > Notification Delivery > should deliver order status change notifications immediately when debouncing is disabled 1ms 25 MB heap used
stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test
Registering resources
Registering catalog resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registering listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registered resource 'amazon-listings'
Registered listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registering inventory resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registering orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registered resource 'amazon-orders'
Registered resource 'amazon-order-action'
Registered resource 'amazon-order-filter'
Registered orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registering reports resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide AI-powered content generation for product optimization
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-mcp-server v1.0.0-integration

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registered resource 'amazon-reports'
Registered resource 'amazon-report-action'
Registered resource 'amazon-report-filter'
Registered reports resources

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide AI-powered content generation for product optimization
Registering AI-assisted tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registering tools
Registering catalog tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registering listings tools

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide AI-powered content generation for product optimization
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide AI-powered content generation for product optimization
Connecting to stdio transport

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide AI-powered content generation for product optimization
STDIO transport initialized
Server connected successfully

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registering inventory tools

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide AI-powered content generation for product optimization
Closing server

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide AI-powered content generation for product optimization
Server closed successfully

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Inventory change notifications set up
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registering orders tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Periodic order monitoring is disabled
Order status change notifications set up
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registering reports tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registering AI-assisted tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Connecting to stdio transport

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle notification delivery and subscription management for system events
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-mcp-server v1.0.0-integration

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle notification delivery and subscription management for system events
Registering inventory tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
STDIO transport initialized
Server connected successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle notification delivery and subscription management for system events
Inventory change notifications set up
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle notification delivery and subscription management for system events
Registering orders tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
2025-08-06T01:14:52.563Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
2025-08-06T01:14:52.563Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
2025-08-06T01:14:52.563Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle notification delivery and subscription management for system events
Periodic order monitoring is disabled
Order status change notifications set up
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle notification delivery and subscription management for system events
Connecting to stdio transport

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle notification delivery and subscription management for system events
STDIO transport initialized
Server connected successfully

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Closing server

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
Server closed successfully

 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectApiCall > should verify API call parameters 2ms 24 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectApiCall > should throw when API call parameters do not match 0ms 24 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectApiCall > should handle multiple calls with call index 0ms 24 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectApiCalls > should verify multiple API calls in sequence 0ms 24 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectApiCalls > should throw when call count does not match 0ms 24 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectSuccessResponse > should verify successful API response structure 0ms 24 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectSuccessResponse > should verify response with custom status code 0ms 24 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectSuccessResponse > should throw for error status codes 1ms 24 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectApiError > should verify API error structure and type 0ms 24 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectApiError > should throw when error type does not match 1ms 24 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectAuthError > should verify authentication error structure and type 0ms 25 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectAuthError > should throw when auth error type does not match 0ms 25 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectAuthenticatedCall > should verify call has authentication headers 0ms 25 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectAuthenticatedCall > should verify AWS signature authentication 0ms 25 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectAuthenticatedCall > should throw when no authorization header present 1ms 25 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidCatalogItem > should verify catalog item structure 0ms 25 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidCatalogItem > should verify specific ASIN when provided 0ms 25 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidCatalogItem > should throw for invalid ASIN format 0ms 25 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidOrder > should verify order structure 0ms 25 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidOrder > should verify specific order ID when provided 0ms 25 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidInventorySummary > should verify inventory summary structure 0ms 25 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidInventorySummary > should verify specific SKU when provided 0ms 26 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidListing > should verify listing structure 0ms 26 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidListing > should verify specific SKU when provided 0ms 26 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidRegionConfig > should verify region configuration 0ms 26 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidRegionConfig > should verify specific region when provided 0ms 26 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidRegionConfig > should throw for invalid marketplace ID format 0ms 26 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidCredentials > should verify credentials structure 0ms 26 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidCredentials > should throw for invalid client ID format 0ms 26 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidCredentials > should throw for invalid refresh token format 0ms 26 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectMockReset > should verify mock was reset 1ms 26 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectMockReset > should throw when mock has calls 0ms 26 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectTimedOperation > should verify operation completes within time limit 0ms 26 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectTimedOperation > should throw when operation takes too long 101ms 26 MB heap used
stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test
Registering resources
Registering catalog resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registering listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registered resource 'amazon-listings'
Registered listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registering inventory resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registering orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registered resource 'amazon-orders'
Registered resource 'amazon-order-action'
Registered resource 'amazon-order-filter'
Registered orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registering reports resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registered resource 'amazon-reports'
Registered resource 'amazon-report-action'
Registered resource 'amazon-report-filter'
Registered reports resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registering tools
Registering catalog tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registering listings tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registering inventory tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Inventory change notifications set up
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registering orders tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Periodic order monitoring is disabled
Order status change notifications set up
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registering reports tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registering AI-assisted tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Connecting to stdio transport

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
STDIO transport initialized
Server connected successfully

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
2025-08-06T01:14:52.567Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Tool result: {
  "content": [
    {
      "type": "text",
      "text": "Error retrieving catalog item: Unknown error: API request failed: Failed to refresh access token: (0 , __vite_ssr_import_0__.default) is not a function"
    }
  ],
  "isError": true
}

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Closing server

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
Server closed successfully

stderr | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle notification delivery and subscription management for system events
Error sending notification: Error: Server does not support logging (required for notifications/message)
    at Server.assertNotificationCapability [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@modelcontextprotocol[24m/sdk/src/server/index.ts:166:17[90m)[39m
    at Server.notification [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@modelcontextprotocol[24m/sdk/src/shared/protocol.ts:642:10[90m)[39m
    at Server.sendLoggingMessage [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@modelcontextprotocol[24m/sdk/src/server/index.ts:363:17[90m)[39m
    at NotificationManager.sendImmediateNotification [90m(/Users/eterzi/kiro-projects/amazon-seller-mcp/[39msrc/server/notifications.ts:280:34[90m)[39m
    at NotificationManager.sendNotification [90m(/Users/eterzi/kiro-projects/amazon-seller-mcp/[39msrc/server/notifications.ts:239:12[90m)[39m
    at NotificationManager.sendInventoryChangeNotification [90m(/Users/eterzi/kiro-projects/amazon-seller-mcp/[39msrc/server/notifications.ts:206:10[90m)[39m
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/integration/server-integration.test.ts:246:25
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle notification delivery and subscription management for system events
Notification: Inventory Change: SKU NOTIFICATION-SKU-001 - Inventory quantity changed from 50 to 45

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test
Registering resources
Registering catalog resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registering listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registered resource 'amazon-listings'
Registered listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registering inventory resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registering orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registered resource 'amazon-orders'
Registered resource 'amazon-order-action'
Registered resource 'amazon-order-filter'
Registered orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registering reports resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registered resource 'amazon-reports'
Registered resource 'amazon-report-action'
Registered resource 'amazon-report-filter'
Registered reports resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registering tools
Registering catalog tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registering listings tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registering inventory tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Inventory change notifications set up
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registering orders tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Periodic order monitoring is disabled
Order status change notifications set up
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registering reports tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registering AI-assisted tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Connecting to stdio transport

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
STDIO transport initialized
Server connected successfully

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
2025-08-06T01:14:52.571Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Closing server

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
Server closed successfully

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test
Registering resources
Registering catalog resources

 ✓ tests/unit/tools/ai-tools.test.ts > AI Tools > should register the generate-product-description tool 8ms 24 MB heap used
 ✓ tests/unit/tools/ai-tools.test.ts > AI Tools > should register the optimize-listing tool 1ms 24 MB heap used
 ✓ tests/unit/tools/ai-tools.test.ts > AI Tools > should generate optimized product descriptions for given product details 1ms 25 MB heap used
 ✓ tests/unit/tools/ai-tools.test.ts > AI Tools > should handle errors when generating a product description 1ms 26 MB heap used
stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registering listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registered resource 'amazon-listings'
Registered listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registering inventory resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registering orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registered resource 'amazon-orders'
Registered resource 'amazon-order-action'
Registered resource 'amazon-order-filter'
Registered orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registering reports resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registered resource 'amazon-reports'
Registered resource 'amazon-report-action'
Registered resource 'amazon-report-filter'
Registered reports resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registering tools
Registering catalog tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registering listings tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registering inventory tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Inventory change notifications set up
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registering orders tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Periodic order monitoring is disabled
Order status change notifications set up
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registering reports tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registering AI-assisted tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Connecting to stdio transport

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
STDIO transport initialized
Server connected successfully

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
2025-08-06T01:14:52.574Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stderr | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Could not get current inventory for SKU NOTIFY-SKU-001: Unknown error: API request failed: Failed to refresh access token: (0 , __vite_ssr_import_0__.default) is not a function

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
2025-08-06T01:14:52.574Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectArrayContainsPattern > should verify array contains items matching pattern 0ms 26 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectArrayContainsPattern > should throw when not enough items match pattern 0ms 26 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidPagination > should verify pagination parameters 0ms 26 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectValidPagination > should handle different parameter naming conventions 0ms 27 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectErrorRecovery > should verify retry attempts were made 0ms 27 MB heap used
 ✓ tests/utils/test-assertions.test.ts > TestAssertions > expectErrorRecovery > should throw when retry count does not match 0ms 27 MB heap used
stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Notification: Notification - A notification was received

stderr | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Error sending notification: Error: Server does not support logging (required for notifications/message)
    at Server.assertNotificationCapability [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@modelcontextprotocol[24m/sdk/src/server/index.ts:166:17[90m)[39m
    at Server.notification [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@modelcontextprotocol[24m/sdk/src/shared/protocol.ts:642:10[90m)[39m
    at Server.sendLoggingMessage [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@modelcontextprotocol[24m/sdk/src/server/index.ts:363:17[90m)[39m
    at NotificationManager.sendImmediateNotification [90m(/Users/eterzi/kiro-projects/amazon-seller-mcp/[39msrc/server/notifications.ts:280:34[90m)[39m
    at NotificationManager.sendNotification [90m(/Users/eterzi/kiro-projects/amazon-seller-mcp/[39msrc/server/notifications.ts:239:12[90m)[39m
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/integration/end-to-end.test.ts:502:25
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Closing server

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
Server closed successfully

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test
Registering resources
Registering catalog resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registering listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registered resource 'amazon-listings'
Registered listings resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registering inventory resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registering orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registered resource 'amazon-orders'
Registered resource 'amazon-order-action'
Registered resource 'amazon-order-filter'
Registered orders resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registering reports resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registered resource 'amazon-reports'
Registered resource 'amazon-report-action'
Registered resource 'amazon-report-filter'
Registered reports resources

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registering tools
Registering catalog tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registering listings tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registering inventory tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Inventory change notifications set up
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registering orders tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Periodic order monitoring is disabled
Order status change notifications set up
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registering reports tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registering AI-assisted tools

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Connecting to stdio transport

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
STDIO transport initialized
Server connected successfully

 × tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication 66ms 27 MB heap used
   → expected true to be falsy
 × tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment 9ms 26 MB heap used
   → expected true to be falsy
 × tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations 5ms 28 MB heap used
   → expected true to be falsy
 × tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations 4ms 30 MB heap used
   → expected true to be falsy
 × tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools 4ms 32 MB heap used
   → expected true to be falsy
 × tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results 3ms 34 MB heap used
   → expected true to be falsy
 × tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows 6ms 36 MB heap used
   → expected true to be falsy
stderr | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Error sending notification: Error: Notification delivery failed
    at EventEmitter.<anonymous> [90m(/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/integration/end-to-end.test.ts:527:13[90m)[39m
    at EventEmitter.mockCall [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at EventEmitter.spy [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
[90m    at EventEmitter.emit (node:events:518:28)[39m
    at NotificationManager.sendGenericNotification [90m(/Users/eterzi/kiro-projects/amazon-seller-mcp/[39msrc/server/notifications.ts:404:26[90m)[39m
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/integration/end-to-end.test.ts:532:53
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Closing server

stdout | tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures
Server closed successfully

 ✓ tests/unit/utils/error-handler.test.ts > Error Classes > should create AmazonSellerMcpError with correct properties 3ms 25 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > Error Classes > should create specific error classes with correct properties 1ms 25 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > translateApiError > should translate AUTH_ERROR with status 401 to AuthenticationError 4ms 26 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > translateApiError > should translate AUTH_ERROR with status 403 to AuthorizationError 1ms 26 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > translateApiError > should translate VALIDATION_ERROR to ValidationError 0ms 26 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > translateApiError > should translate RATE_LIMIT_EXCEEDED to RateLimitExceededError 0ms 26 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > translateApiError > should translate SERVER_ERROR to ServerError 0ms 26 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > translateApiError > should translate NETWORK_ERROR to NetworkError 0ms 26 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > translateApiError > should translate CLIENT_ERROR with status 404 to ResourceNotFoundError 0ms 26 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > translateApiError > should translate CLIENT_ERROR with status 429 to ThrottlingError 0ms 26 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > translateToMcpErrorResponse > should translate AmazonSellerMcpError to MCP error response 0ms 26 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > translateToMcpErrorResponse > should translate generic Error to MCP error response 0ms 26 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > RetryRecoveryStrategy > should determine if an error can be recovered from 0ms 26 MB heap used
 ✓ tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should maintain system stability when notification delivery encounters failures 5ms 39 MB heap used
stdout | tests/unit/tools/ai-tools.test.ts > AI Tools > should retrieve the listing and call the LLM to optimize it
2025-08-06T01:14:52.606Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/unit/tools/ai-tools.test.ts > AI Tools > should handle errors when the listing is not found
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should debounce order status change notifications for the same order
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should debounce order status change notifications for the same order
Notification manager initialized (debounced: true, debounceTime: 100ms)

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle notification delivery and subscription management for system events
Closing server

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle notification delivery and subscription management for system events
Server closed successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle API errors gracefully while maintaining service availability
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-mcp-server v1.0.0-integration

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle API errors gracefully while maintaining service availability
Registering catalog tools

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle API errors gracefully while maintaining service availability
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle API errors gracefully while maintaining service availability
Connecting to stdio transport

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle API errors gracefully while maintaining service availability
STDIO transport initialized
Server connected successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle API errors gracefully while maintaining service availability
Closing server

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle API errors gracefully while maintaining service availability
Server closed successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should maintain system stability when components encounter configuration errors
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-mcp-server v1.0.0-integration

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should maintain system stability when components encounter configuration errors
Connecting to stdio transport

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should maintain system stability when components encounter configuration errors
STDIO transport initialized
Server connected successfully

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should maintain system stability when components encounter configuration errors
Closing server

stdout | tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should maintain system stability when components encounter configuration errors
Server closed successfully

stdout | tests/unit/server/notifications.test.ts > NotificationManager > should send different notifications separately when debounced
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notifications.test.ts > NotificationManager > should send different notifications separately when debounced
Notification manager initialized (debounced: true, debounceTime: 100ms)

 ✓ tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should register all resources and tools successfully during initialization 21ms 28 MB heap used
 ✓ tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide catalog search functionality through registered tools 1ms 29 MB heap used
 ✓ tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support complete listing management workflow from creation to updates 1ms 30 MB heap used
 ✓ tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable inventory management through query and update operations 1ms 31 MB heap used
 ✓ tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should support order processing workflow from retrieval to status updates 1ms 32 MB heap used
 ✓ tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should enable report generation and retrieval workflow for business analytics 2ms 33 MB heap used
 ✓ tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should provide AI-powered content generation for product optimization 1ms 33 MB heap used
 ✓ tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle notification delivery and subscription management for system events 54ms 36 MB heap used
 ✓ tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should handle API errors gracefully while maintaining service availability 2ms 36 MB heap used
 ✓ tests/integration/server-integration.test.ts > Amazon Seller MCP Server Integration > should maintain system stability when components encounter configuration errors 1ms 37 MB heap used
stdout | tests/unit/tools/ai-tools.test.ts > AI Tools > should handle errors when the listing is not found
2025-08-06T01:14:52.645Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

stdout | tests/unit/tools/ai-tools.test.ts > AI Tools > should handle errors when optimizing a listing
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/unit/tools/ai-tools.test.ts > AI Tools > should handle errors when optimizing a listing
2025-08-06T01:14:52.680Z [[31merror[39m]: Unknown error
{
  "errorType": "UNKNOWN_ERROR",
  "errorCode": "UNKNOWN_ERROR"
}

 ✓ tests/unit/tools/ai-tools.test.ts > AI Tools > should retrieve the listing and call the LLM to optimize it 124ms 29 MB heap used
 ✓ tests/unit/tools/ai-tools.test.ts > AI Tools > should handle errors when the listing is not found 39ms 30 MB heap used
 ✓ tests/unit/tools/ai-tools.test.ts > AI Tools > should handle errors when optimizing a listing 34ms 31 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > setupMockEnvironment > should create a complete mock environment 3ms 27 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > setupMockEnvironment > should allow overriding mock environment parts 1ms 28 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > createTestAuthConfig > should create valid auth configuration 0ms 28 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > createTestAuthConfig > should allow overriding auth config properties 0ms 28 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > createTestApiClientConfig > should create valid API client configuration 0ms 28 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > createTestServerConfig > should create valid server configuration 0ms 28 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > createTestServerConfig > should allow overriding server config properties 0ms 28 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > setupTestEnvironment > should create environment with cleanup function 1ms 29 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > createTestHooks > should create beforeEach and afterEach hooks 1ms 30 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > setupApiResponseMocks > should setup success response mocks 1ms 31 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > setupApiResponseMocks > should setup error response mocks 1ms 31 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > setupApiResponseMocks > should setup timeout mocks 1ms 32 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > setupApiResponseMocks > should setup rate limit mocks 1ms 32 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > setupAuthMocks > should setup valid token mocks 1ms 33 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > setupAuthMocks > should setup expired token scenario 1ms 34 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > setupAuthMocks > should setup refresh failure scenario 1ms 34 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > setupAuthMocks > should setup signing failure scenario 1ms 35 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > createEndpointTestData > should create catalog endpoint test data 1ms 35 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > createEndpointTestData > should create orders endpoint test data 0ms 35 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > createEndpointTestData > should create inventory endpoint test data 0ms 35 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > createEndpointTestData > should create listings endpoint test data 0ms 36 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > createEndpointTestData > should create default test data for unknown endpoints 0ms 36 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > withTestIsolation > should provide isolated test environment 1ms 37 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > withTestIsolation > should cleanup even if test throws 3ms 29 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > waitForAsyncOperations > should wait for specified time 52ms 29 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > createTestSpy > should create a test spy function 0ms 30 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > createTestSpy > should create a test spy with implementation 1ms 30 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > verifyMockReset > should pass when mocks are properly reset 1ms 31 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > verifyMockReset > should throw when mocks have remaining calls 0ms 31 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > cleanupMockEnvironment > should cleanup mock environment without errors 1ms 32 MB heap used
 ✓ tests/utils/test-setup.test.ts > TestSetup > cleanupMockEnvironment > should handle cleanup when no environment exists 0ms 32 MB heap used
stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > registerInventoryResources > should register inventory resources without errors
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > registerInventoryResources > should register amazon-inventory resource
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > registerInventoryResources > should register amazon-inventory-filter resource
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > create > should create a mock axios instance with all HTTP methods 2ms 17 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > create > should create axios.create mock by default 1ms 18 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > create > should create axios.isAxiosError mock by default 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > create > should allow disabling axios.create setup 1ms 18 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > create > should allow disabling axios.isAxiosError setup 1ms 18 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > createInstance > should create a mock axios instance without static methods 1ms 19 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > mockSuccess > should configure mock to return successful response 1ms 19 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > mockSuccess > should configure mock for specific HTTP method 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > mockSuccess > should configure mock for one-time response 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > mockSuccess > should handle delayed responses 53ms 13 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > mockError > should configure mock to return error 1ms 13 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > mockError > should configure mock for specific HTTP method 0ms 13 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > mockError > should configure mock for one-time error 0ms 13 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > mockError > should create proper axios error with response 0ms 13 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > mockError > should create network error without response 0ms 14 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > mockSequence > should configure mock to return responses in sequence 0ms 14 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > mockSequence > should work with specific HTTP method 0ms 14 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > mockHttpError > should configure HTTP error with status code 0ms 14 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > mockNetworkError > should configure network error with default code 0ms 15 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > mockNetworkError > should configure network error with custom code 0ms 15 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > mockTimeoutError > should configure timeout error 0ms 15 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockFactory > resetInstance > should reset all mocks in an axios instance 0ms 15 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockScenarios > success scenarios > should create success scenario 0ms 15 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockScenarios > success scenarios > should create created scenario 0ms 15 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockScenarios > success scenarios > should create no content scenario 0ms 15 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockScenarios > error scenarios > should create bad request scenario 0ms 15 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockScenarios > error scenarios > should create unauthorized scenario 0ms 16 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockScenarios > error scenarios > should create forbidden scenario 0ms 16 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockScenarios > error scenarios > should create not found scenario 0ms 16 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockScenarios > error scenarios > should create rate limit scenario 0ms 16 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockScenarios > error scenarios > should create server error scenario 0ms 16 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockScenarios > error scenarios > should create network error scenario 0ms 16 MB heap used
 ✓ tests/utils/mock-factories/axios-factory.test.ts > AxiosMockScenarios > error scenarios > should create timeout scenario 0ms 16 MB heap used
stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > registerInventoryResources > should register exactly two resources
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle specific inventory item retrieval successfully
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle specific inventory item retrieval successfully
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

 ✓ tests/unit/server/notification-delivery.test.ts > Notification Delivery > should debounce inventory change notifications for the same SKU 151ms 23 MB heap used
 ✓ tests/unit/server/notifications.test.ts > NotificationManager > should debounce notifications when enabled 153ms 26 MB heap used
stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle inventory list retrieval successfully
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle inventory list retrieval successfully
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle empty inventory list
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle empty inventory list
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle API errors gracefully
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle API errors gracefully
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stderr | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle API errors gracefully
Error retrieving inventory: Error: Inventory API Error
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/resources/inventory-resources.test.ts:368:63
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle URL query parameters for filtering
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle URL query parameters for filtering
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should handle SKU filter successfully
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should handle SKU filter successfully
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should handle channel filter successfully
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should handle channel filter successfully
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should handle date filter successfully
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should handle date filter successfully
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should show filter options when no filter is provided
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should handle invalid filter type
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stderr | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should handle invalid filter type
Error filtering inventory: Error: Unknown filter type: invalid
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39msrc/resources/inventory/inventory-resources.ts:298:21
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/resources/inventory-resources.test.ts:659:28
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should handle invalid date format
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stderr | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should handle invalid date format
Error filtering inventory: Error: Invalid date format. Use YYYY-MM-DD.
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39msrc/resources/inventory/inventory-resources.ts:294:23
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/resources/inventory-resources.test.ts:676:28
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > resource template completion > should provide SKU completion for inventory resource
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

 ✓ tests/unit/utils/error-handler.test.ts > RetryRecoveryStrategy > should recover from recoverable errors 251ms 26 MB heap used
stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > registerCatalogResources > should register catalog resources without errors
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/unit/utils/error-handler.test.ts > RetryRecoveryStrategy > should throw if retry count exceeds max retries
2025-08-06T01:14:52.758Z [[31merror[39m]: Retry failed after 3 attempts
{
  "errorMessage": "Network error",
  "errorName": "NetworkError",
  "maxRetries": 3
}

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > resource template completion > should handle completion errors gracefully
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/utils/error-handler.test.ts > ErrorRecoveryManager > should recover from recoverable errors
2025-08-06T01:14:52.759Z [[32minfo[39m]: Retrying operation after error (attempt NaN/3)
{
  "errorMessage": "Network error",
  "errorName": "NetworkError",
  "delayMs": null,
  "retryCount": null,
  "maxRetries": 3
}

stderr | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > resource template completion > should handle completion errors gracefully
Error completing SKU: Error: Completion Error
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/resources/inventory-resources.test.ts:730:49
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

stdout | tests/unit/resources/inventory-resources.test.ts > Inventory Resources > resource template completion > should return empty array for short completion values
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > registerCatalogResources > should register amazon-catalog resource
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > registerCatalogResources > should register amazon-catalog-search resource
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > registerCatalogResources > should register exactly two resources
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog resource handler > should handle catalog item retrieval successfully
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog resource handler > should handle catalog item retrieval successfully
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog resource handler > should handle missing ASIN parameter
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stderr | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog resource handler > should handle missing ASIN parameter
Error retrieving catalog item: Error: ASIN is required
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39msrc/resources/catalog/catalog-resources.ts:58:17
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/resources/catalog-resources.test.ts:167:28
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog resource handler > should handle API errors gracefully
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog resource handler > should handle API errors gracefully
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stderr | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog resource handler > should handle API errors gracefully
Error retrieving catalog item: Error: API Error
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/resources/catalog-resources.test.ts:182:60
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should not debounce notifications for different entities
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should not debounce notifications for different entities
Notification manager initialized (debounced: true, debounceTime: 100ms)

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog-search resource handler > should handle catalog search successfully
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog-search resource handler > should handle catalog search successfully
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog-search resource handler > should handle empty search results
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog-search resource handler > should handle empty search results
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog-search resource handler > should handle missing query parameter
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stderr | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog-search resource handler > should handle missing query parameter
Error searching catalog: Error: Search query is required
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39msrc/resources/catalog/catalog-resources.ts:215:17
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/resources/catalog-resources.test.ts:360:28
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog-search resource handler > should handle API errors gracefully
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog-search resource handler > should handle API errors gracefully
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stderr | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog-search resource handler > should handle API errors gracefully
Error searching catalog: Error: Search API Error
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/resources/catalog-resources.test.ts:375:64
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > registerInventoryResources > should register inventory resources without errors 4ms 25 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > registerInventoryResources > should register amazon-inventory resource 3ms 26 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > registerInventoryResources > should register amazon-inventory-filter resource 1ms 27 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > registerInventoryResources > should register exactly two resources 1ms 27 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle specific inventory item retrieval successfully 35ms 28 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle inventory list retrieval successfully 1ms 29 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle empty inventory list 2ms 30 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle API errors gracefully 2ms 31 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory resource handler > should handle URL query parameters for filtering 2ms 32 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should handle SKU filter successfully 3ms 33 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should handle channel filter successfully 2ms 34 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should handle date filter successfully 2ms 34 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should show filter options when no filter is provided 1ms 35 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should handle invalid filter type 2ms 36 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > amazon-inventory-filter resource handler > should handle invalid date format 1ms 37 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > resource template completion > should provide SKU completion for inventory resource 6ms 30 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > resource template completion > should handle completion errors gracefully 2ms 32 MB heap used
 ✓ tests/unit/resources/inventory-resources.test.ts > Inventory Resources > resource template completion > should return empty array for short completion values 1ms 33 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > RetryRecoveryStrategy > should throw if retry count exceeds max retries 1ms 26 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > ErrorRecoveryManager > should return successful result when operation completes without errors 0ms 27 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > ErrorRecoveryManager > should recover from recoverable errors 2ms 27 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > ErrorRecoveryManager > should throw if no strategy can recover 0ms 27 MB heap used
 ✓ tests/unit/utils/error-handler.test.ts > createDefaultErrorRecoveryManager > should create a manager with default strategies 0ms 27 MB heap used
stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > resource template completion > should provide ASIN completion for catalog resource
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

 ✓ tests/unit/index.test.ts > Main Library Index > should export AmazonSellerMcpServer and TransportConfig 17ms 25 MB heap used
 ✓ tests/unit/index.test.ts > Main Library Index > should export API client components 1ms 25 MB heap used
 ✓ tests/unit/index.test.ts > Main Library Index > should export authentication components 1ms 26 MB heap used
 ✓ tests/unit/index.test.ts > Main Library Index > should export tool registration functions 1ms 26 MB heap used
 ✓ tests/unit/index.test.ts > Main Library Index > should export resource registration functions 1ms 27 MB heap used
 ✓ tests/unit/index.test.ts > Main Library Index > should export type definitions 1ms 28 MB heap used
 ✓ tests/unit/index.test.ts > Main Library Index > should export utility functions 1ms 28 MB heap used
 ✓ tests/unit/index.test.ts > Main Library Index > should handle module initialization without errors 1ms 29 MB heap used
 ✓ tests/unit/index.test.ts > Main Library Index > should provide consistent export structure 1ms 30 MB heap used
stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > resource template completion > should handle completion errors gracefully
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/unit/tools/index.test.ts > Tools Module Index > should maintain tool registration isolation
Registered reports tools

stderr | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > resource template completion > should handle completion errors gracefully
Error completing ASIN: Error: Completion Error
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/resources/catalog-resources.test.ts:451:55
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

stdout | tests/unit/resources/catalog-resources.test.ts > Catalog Resources > resource template completion > should return empty array for short completion values
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/unit/server/notifications.test.ts > NotificationManager > should handle notification sending errors gracefully
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notifications.test.ts > NotificationManager > should handle notification sending errors gracefully
Notification: Inventory Change: SKU TEST-SKU-123 - Inventory quantity changed from 10 to 5

 ✓ tests/unit/server/notifications.test.ts > NotificationManager > should send different notifications separately when debounced 151ms 24 MB heap used
 ✓ tests/unit/server/notifications.test.ts > NotificationManager > should handle notification sending errors gracefully 1ms 25 MB heap used
 ✓ tests/unit/tools/index.test.ts > Tools Module Index > should export registerCatalogTools 14ms 24 MB heap used
 ✓ tests/unit/tools/index.test.ts > Tools Module Index > should export registerListingsTools 1ms 25 MB heap used
 ✓ tests/unit/tools/index.test.ts > Tools Module Index > should export registerInventoryTools 0ms 25 MB heap used
 ✓ tests/unit/tools/index.test.ts > Tools Module Index > should export registerOrdersTools 1ms 26 MB heap used
 ✓ tests/unit/tools/index.test.ts > Tools Module Index > should export registerReportsTools 1ms 26 MB heap used
 ✓ tests/unit/tools/index.test.ts > Tools Module Index > should export registerAiTools 0ms 27 MB heap used
 ✓ tests/unit/tools/index.test.ts > Tools Module Index > should export all tool registration functions 1ms 28 MB heap used
 ✓ tests/unit/tools/index.test.ts > Tools Module Index > should handle module initialization without errors 1ms 28 MB heap used
 ✓ tests/unit/tools/index.test.ts > Tools Module Index > should provide consistent export structure 1ms 29 MB heap used
 ✓ tests/unit/tools/index.test.ts > Tools Module Index > should export functions that can be called 5ms 30 MB heap used
 ✓ tests/unit/tools/index.test.ts > Tools Module Index > should export functions with consistent signatures 1ms 31 MB heap used
 ✓ tests/unit/tools/index.test.ts > Tools Module Index > should register tools when called 2ms 32 MB heap used
 ✓ tests/unit/tools/index.test.ts > Tools Module Index > should handle registration with different auth configs 2ms 32 MB heap used
 ✓ tests/unit/tools/index.test.ts > Tools Module Index > should maintain tool registration isolation 3ms 33 MB heap used
 ✓ tests/unit/resources/catalog-resources.test.ts > Catalog Resources > registerCatalogResources > should register catalog resources without errors 3ms 25 MB heap used
 ✓ tests/unit/resources/catalog-resources.test.ts > Catalog Resources > registerCatalogResources > should register amazon-catalog resource 2ms 25 MB heap used
 ✓ tests/unit/resources/catalog-resources.test.ts > Catalog Resources > registerCatalogResources > should register amazon-catalog-search resource 1ms 26 MB heap used
 ✓ tests/unit/resources/catalog-resources.test.ts > Catalog Resources > registerCatalogResources > should register exactly two resources 1ms 26 MB heap used
 ✓ tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog resource handler > should handle catalog item retrieval successfully 2ms 27 MB heap used
 ✓ tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog resource handler > should handle missing ASIN parameter 2ms 28 MB heap used
 ✓ tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog resource handler > should handle API errors gracefully 1ms 29 MB heap used
 ✓ tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog-search resource handler > should handle catalog search successfully 1ms 30 MB heap used
 ✓ tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog-search resource handler > should handle empty search results 2ms 30 MB heap used
 ✓ tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog-search resource handler > should handle missing query parameter 1ms 31 MB heap used
 ✓ tests/unit/resources/catalog-resources.test.ts > Catalog Resources > amazon-catalog-search resource handler > should handle API errors gracefully 1ms 32 MB heap used
 ✓ tests/unit/resources/catalog-resources.test.ts > Catalog Resources > resource template completion > should provide ASIN completion for catalog resource 3ms 33 MB heap used
 ✓ tests/unit/resources/catalog-resources.test.ts > Catalog Resources > resource template completion > should handle completion errors gracefully 3ms 34 MB heap used
 ✓ tests/unit/resources/catalog-resources.test.ts > Catalog Resources > resource template completion > should return empty array for short completion values 1ms 35 MB heap used
stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should create server instance with valid configuration
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support stdio transport configuration
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support stdio transport configuration
Connecting to stdio transport

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support stdio transport configuration
STDIO transport initialized
Server connected successfully

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support stdio transport configuration
Closing server
Server closed successfully

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support HTTP transport configuration
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support HTTP transport configuration
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support HTTP transport configuration
Connecting to streamableHttp transport

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support HTTP transport configuration
HTTP server started on localhost:3000

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support HTTP transport configuration
Server connected successfully

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support HTTP transport configuration
Closing server

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support HTTP transport configuration
HTTP server closed

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support HTTP transport configuration
Server closed successfully

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should provide connection state management capabilities
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should provide tool and resource registration capabilities
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should provide access to underlying MCP server instance
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should handle connection failures gracefully
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should handle connection failures gracefully
Connecting to stdio transport

stderr | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should handle connection failures gracefully
Failed to connect server: Error: Connection failed
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/server/server.test.ts:114:51
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should provide access to resource and tool management systems
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support multiple transport configurations
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support multiple transport configurations
Connecting to stdio transport
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test
STDIO transport initialized
Server connected successfully

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support multiple transport configurations
Connecting to streamableHttp transport

stdout | tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support multiple transport configurations
Closing server
Server closed successfully

stdout | tests/unit/server/server.test.ts
HTTP server started on localhost:3000

stdout | tests/unit/server/server.test.ts
Server connected successfully

 ✓ tests/unit/server/server.test.ts > AmazonSellerMcpServer > should create server instance with valid configuration 7ms 23 MB heap used
 ✓ tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support stdio transport configuration 4ms 23 MB heap used
 ✓ tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support HTTP transport configuration 15ms 23 MB heap used
 ✓ tests/unit/server/server.test.ts > AmazonSellerMcpServer > should provide connection state management capabilities 1ms 23 MB heap used
 ✓ tests/unit/server/server.test.ts > AmazonSellerMcpServer > should provide tool and resource registration capabilities 1ms 24 MB heap used
 ✓ tests/unit/server/server.test.ts > AmazonSellerMcpServer > should provide access to underlying MCP server instance 1ms 25 MB heap used
 ✓ tests/unit/server/server.test.ts > AmazonSellerMcpServer > should handle connection failures gracefully 2ms 26 MB heap used
 ✓ tests/unit/server/server.test.ts > AmazonSellerMcpServer > should provide access to resource and tool management systems 1ms 26 MB heap used
 ✓ tests/unit/server/server.test.ts > AmazonSellerMcpServer > should support multiple transport configurations 2ms 28 MB heap used
stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
Connecting to streamableHttp transport
Connecting to streamableHttp transport
Connecting to streamableHttp transport

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
HTTP server started on localhost:3000

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
Server connected successfully

 ✓ tests/unit/server/notification-delivery.test.ts > Notification Delivery > should debounce order status change notifications for the same order 151ms 23 MB heap used
stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
HTTP server started on localhost:3002

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
Server connected successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
HTTP server started on localhost:3001

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
Server connected successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
Closing server

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
HTTP server closed

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
Server closed successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
Closing server

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
HTTP server closed

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
Server closed successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
Closing server

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
HTTP server closed

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts
Server closed successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should properly clean up ports after server shutdown
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should properly clean up ports after server shutdown
Connecting to streamableHttp transport

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should properly clean up ports after server shutdown
HTTP server started on localhost:3000

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should properly clean up ports after server shutdown
Server connected successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should properly clean up ports after server shutdown
Closing server

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should properly clean up ports after server shutdown
HTTP server closed

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should properly clean up ports after server shutdown
Server closed successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should properly clean up ports after server shutdown
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should properly clean up ports after server shutdown
Connecting to streamableHttp transport

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should properly clean up ports after server shutdown
HTTP server started on localhost:3000

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should properly clean up ports after server shutdown
Server connected successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should properly clean up ports after server shutdown
Closing server

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should properly clean up ports after server shutdown
HTTP server closed

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should properly clean up ports after server shutdown
Server closed successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Connecting to streamableHttp transport

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
HTTP server started on localhost:3000

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Server connected successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Closing server

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
HTTP server closed

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Server closed successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Connecting to streamableHttp transport

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
HTTP server started on localhost:3000

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Server connected successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Closing server

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
HTTP server closed

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Server closed successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Connecting to streamableHttp transport

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
HTTP server started on localhost:3000

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Server connected successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Closing server

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
HTTP server closed

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Server closed successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Connecting to streamableHttp transport

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
HTTP server started on localhost:3000

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Server connected successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Closing server

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
HTTP server closed

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Server closed successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Connecting to streamableHttp transport

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
HTTP server started on localhost:3000

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Server connected successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Closing server

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
HTTP server closed

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks
Server closed successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
Connecting to stdio transport

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
STDIO transport initialized
Server connected successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
Connecting to streamableHttp transport

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
HTTP server started on localhost:3000

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
Server connected successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
Connecting to streamableHttp transport

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
HTTP server started on localhost:3001

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
Server connected successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
Closing server

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
Server closed successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
Closing server

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
HTTP server closed

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
Server closed successfully

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
Closing server

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
HTTP server closed

stdout | tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts
Server closed successfully

 ✓ tests/unit/server/port-isolation.test.ts > Server Port Isolation > should allow multiple HTTP servers to run concurrently without port conflicts 20ms 24 MB heap used
 ✓ tests/unit/server/port-isolation.test.ts > Server Port Isolation > should properly clean up ports after server shutdown 5ms 25 MB heap used
 ✓ tests/unit/server/port-isolation.test.ts > Server Port Isolation > should handle rapid server creation and destruction without port leaks 11ms 28 MB heap used
 ✓ tests/unit/server/port-isolation.test.ts > Server Port Isolation > should support mixed stdio and HTTP transports without conflicts 7ms 31 MB heap used
stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should not debounce notifications of different types
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should not debounce notifications of different types
Notification manager initialized (debounced: true, debounceTime: 100ms)

 ✓ tests/unit/utils/logger.test.ts > Logger System > should create logger instance successfully 4ms 22 MB heap used
 ✓ tests/unit/utils/logger.test.ts > Logger System > should create logger with file configuration 1ms 23 MB heap used
 ✓ tests/unit/utils/logger.test.ts > Logger System > should create logger with console disabled 2ms 24 MB heap used
 ✓ tests/unit/utils/logger.test.ts > Logger System > should create logger with custom formatter 3ms 25 MB heap used
 ✓ tests/unit/utils/logger.test.ts > Logger System > should configure and retrieve default logger 2ms 26 MB heap used
 ✓ tests/unit/utils/logger.test.ts > Logger System > should provide logging functions that execute without errors 3ms 27 MB heap used
 ✓ tests/unit/utils/logger.test.ts > Logger System > should create child logger successfully 6ms 24 MB heap used
 ✓ tests/unit/utils/logger.test.ts > Logger System > should redact sensitive authentication data from messages 2ms 26 MB heap used
 ✓ tests/unit/utils/logger.test.ts > Logger System > should redact credit card numbers from messages 2ms 27 MB heap used
 ✓ tests/unit/utils/logger.test.ts > Logger System > should redact email addresses from messages 1ms 28 MB heap used
 ✓ tests/unit/utils/logger.test.ts > Logger System > should redact phone numbers from messages 1ms 29 MB heap used
 ✓ tests/unit/utils/logger.test.ts > Logger System > should support custom redaction patterns 2ms 31 MB heap used
stderr | tests/utils/mock-factories/base-factory.test.ts > TestIsolationUtils > registerCleanup > should handle cleanup task errors gracefully
Cleanup task failed: Error: Cleanup error
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/utils/mock-factories/base-factory.test.ts:341:15
    at mockCall [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/spy/dist/index.js:96:15[90m)[39m
    at spy [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4mtinyspy[24m/dist/index.js:47:103[90m)[39m
    at Function.cleanup [90m(/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/utils/mock-factories/base-factory.ts:268:9[90m)[39m
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/utils/mock-factories/base-factory.test.ts:348:39
    at Proxy.assertThrows [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4mchai[24m/chai.js:2787:5[90m)[39m
    at Proxy.methodWrapper [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4mchai[24m/chai.js:1706:25[90m)[39m
    at Proxy.<anonymous> [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/expect/dist/index.js:1088:12[90m)[39m
    at Proxy.overwritingMethodWrapper [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4mchai[24m/chai.js:1755:33[90m)[39m
    at Proxy.<anonymous> [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/expect/dist/index.js:1420:16[90m)[39m

stdout | tests/unit/tools/tools.test.ts > Tools Registration > should register all catalog tools
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/unit/tools/tools.test.ts > Tools Registration > should register all listings tools
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/unit/tools/tools.test.ts > Tools Registration > should register all inventory tools
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/unit/tools/tools.test.ts > Tools Registration > should register all orders tools
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

 ✓ tests/utils/mock-factories/base-factory.test.ts > BaseMockFactory > create > should create a mock instance with default config 1ms 18 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > BaseMockFactory > create > should create a mock instance with overrides 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > BaseMockFactory > create > should track created instances 1ms 18 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > BaseMockFactory > createMultiple > should create multiple instances with default config 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > BaseMockFactory > createMultiple > should create multiple instances with individual overrides 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > BaseMockFactory > createMultiple > should handle partial overrides array 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > BaseMockFactory > reset > should clear instances and reset mocks 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > BaseMockFactory > getName > should return the factory name 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockFactoryRegistry > register > should register a factory 1ms 18 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockFactoryRegistry > register > should register multiple factories 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockFactoryRegistry > get > should return registered factory 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockFactoryRegistry > get > should return undefined for unregistered factory 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockFactoryRegistry > resetAll > should reset all registered factories 0ms 18 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockFactoryRegistry > getRegisteredNames > should return all registered factory names 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockScenarioManager > register > should register a scenario 1ms 19 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockScenarioManager > activate > should activate a scenario and call setup 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockScenarioManager > activate > should throw error for non-existent scenario 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockScenarioManager > activate > should teardown previous scenario when activating new one 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockScenarioManager > deactivate > should deactivate active scenario and call teardown 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockScenarioManager > deactivate > should handle deactivation when no scenario is active 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockScenarioManager > deactivate > should handle scenario without teardown 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > TestIsolationUtils > registerCleanup > should register and execute cleanup tasks 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > TestIsolationUtils > registerCleanup > should perform multiple cleanup tasks when cleaning up 0ms 19 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > TestIsolationUtils > registerCleanup > should handle cleanup task errors gracefully 3ms 20 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > TestIsolationUtils > resetAll > should reset factory registry and cleanup 0ms 20 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockUtils > createResolvedPromise > should create a resolved promise 0ms 20 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockUtils > createRejectedPromise > should create a rejected promise 0ms 20 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockUtils > createSequentialMock > should return values in sequence 0ms 20 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockUtils > createFailAfterMock > should succeed then fail after specified calls 0ms 20 MB heap used
 ✓ tests/utils/mock-factories/base-factory.test.ts > MockUtils > createDelayedMock > should return a promise that resolves after delay 10ms 11 MB heap used
stdout | tests/unit/tools/tools.test.ts > Tools Registration > should register all reports tools
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/unit/tools/tools.test.ts > Tools Registration > should register all AI tools
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/unit/tools/tools.test.ts > Tools Registration > should register all tools without conflicts
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/unit/tools/tools.test.ts > Tools Registration > should validate input for catalog tools
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/unit/tools/tools.test.ts > Tools Registration > should validate input for listings tools
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/unit/tools/tools.test.ts > Tools Registration > should validate input for inventory tools
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/unit/tools/tools.test.ts > Tools Registration > should validate input for orders tools
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

stdout | tests/unit/tools/tools.test.ts > Tools Registration > should validate input for reports tools
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/unit/tools/tools.test.ts > Tools Registration > should validate input for AI tools
Registered tool 'generate-product-description'
Registered tool 'optimize-listing'

stdout | tests/unit/utils/index.test.ts > Utils Module Index > should export factory functions that can be called
2025-08-06T01:14:52.985Z [[31merror[39m]: Unknown error
{
  "errorCode": "UNKNOWN_ERROR"
}

 ✓ tests/unit/tools/tools.test.ts > Tools Registration > should register all catalog tools 9ms 23 MB heap used
 ✓ tests/unit/tools/tools.test.ts > Tools Registration > should register all listings tools 1ms 24 MB heap used
 ✓ tests/unit/tools/tools.test.ts > Tools Registration > should register all inventory tools 1ms 24 MB heap used
 ✓ tests/unit/tools/tools.test.ts > Tools Registration > should register all orders tools 6ms 22 MB heap used
 ✓ tests/unit/tools/tools.test.ts > Tools Registration > should register all reports tools 1ms 22 MB heap used
 ✓ tests/unit/tools/tools.test.ts > Tools Registration > should register all AI tools 1ms 22 MB heap used
 ✓ tests/unit/tools/tools.test.ts > Tools Registration > should register all tools without conflicts 1ms 23 MB heap used
 ✓ tests/unit/tools/tools.test.ts > Tools Registration > should validate input for catalog tools 2ms 24 MB heap used
 ✓ tests/unit/tools/tools.test.ts > Tools Registration > should validate input for listings tools 1ms 24 MB heap used
 ✓ tests/unit/tools/tools.test.ts > Tools Registration > should validate input for inventory tools 1ms 25 MB heap used
 ✓ tests/unit/tools/tools.test.ts > Tools Registration > should validate input for orders tools 1ms 25 MB heap used
 ✓ tests/unit/tools/tools.test.ts > Tools Registration > should validate input for reports tools 1ms 26 MB heap used
 ✓ tests/unit/tools/tools.test.ts > Tools Registration > should validate input for AI tools 1ms 26 MB heap used
stdout | tests/unit/server/index.test.ts > Server Module Index > should export classes that can be instantiated
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

 ✓ tests/unit/utils/index.test.ts > Utils Module Index > should export error handler utilities 7ms 23 MB heap used
 ✓ tests/unit/utils/index.test.ts > Utils Module Index > should export logger utilities 1ms 23 MB heap used
 ✓ tests/unit/utils/index.test.ts > Utils Module Index > should export cache manager utilities 1ms 24 MB heap used
 ✓ tests/unit/utils/index.test.ts > Utils Module Index > should export connection pool utilities 2ms 24 MB heap used
 ✓ tests/unit/utils/index.test.ts > Utils Module Index > should handle module initialization without errors 1ms 25 MB heap used
 ✓ tests/unit/utils/index.test.ts > Utils Module Index > should provide consistent export structure 1ms 26 MB heap used
 ✓ tests/unit/utils/index.test.ts > Utils Module Index > should export error classes that can be instantiated 1ms 26 MB heap used
 ✓ tests/unit/utils/index.test.ts > Utils Module Index > should export utility classes that can be instantiated 4ms 28 MB heap used
 ✓ tests/unit/utils/index.test.ts > Utils Module Index > should export factory functions that can be called 3ms 28 MB heap used
 ✓ tests/unit/utils/index.test.ts > Utils Module Index > should export singleton getter functions 1ms 29 MB heap used
 ✓ tests/unit/utils/index.test.ts > Utils Module Index > should maintain error class inheritance 1ms 30 MB heap used
stdout | tests/unit/server/index.test.ts > Server Module Index > should export notification functions that can be called
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/index.test.ts > Server Module Index > should maintain consistent class interface
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Initialized Amazon Seller MCP Server: test-amazon-seller-mcp v1.0.0-test

 ✓ tests/unit/server/notification-delivery.test.ts > Notification Delivery > should not debounce notifications for different entities 152ms 23 MB heap used
 ✓ tests/unit/server/index.test.ts > Server Module Index > should export AmazonSellerMcpServer from server.js 5ms 25 MB heap used
 ✓ tests/unit/server/index.test.ts > Server Module Index > should export TransportConfig from server.js 0ms 26 MB heap used
 ✓ tests/unit/server/index.test.ts > Server Module Index > should export ResourceRegistrationManager from resources.js 0ms 26 MB heap used
 ✓ tests/unit/server/index.test.ts > Server Module Index > should export ToolRegistrationManager from tools.js 1ms 27 MB heap used
 ✓ tests/unit/server/index.test.ts > Server Module Index > should export NotificationManager from notifications.js 1ms 27 MB heap used
 ✓ tests/unit/server/index.test.ts > Server Module Index > should export setupInventoryChangeNotifications from inventory-notifications.js 5ms 25 MB heap used
 ✓ tests/unit/server/index.test.ts > Server Module Index > should export setupOrderStatusChangeNotifications from order-notifications.js 0ms 25 MB heap used
 ✓ tests/unit/server/index.test.ts > Server Module Index > should handle module initialization without errors 2ms 26 MB heap used
 ✓ tests/unit/server/index.test.ts > Server Module Index > should provide consistent export structure 1ms 27 MB heap used
 ✓ tests/unit/server/index.test.ts > Server Module Index > should export classes that can be instantiated 5ms 28 MB heap used
 ✓ tests/unit/server/index.test.ts > Server Module Index > should export notification functions that can be called 1ms 29 MB heap used
 ✓ tests/unit/server/index.test.ts > Server Module Index > should maintain consistent class interface 1ms 29 MB heap used
stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should format inventory change notifications correctly
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should format order status change notifications correctly
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should handle errors when sending notifications gracefully
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should handle errors when sending notifications gracefully
Notification: Inventory Change: SKU TEST-SKU-123 - Inventory quantity changed from 10 to 5

stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should send events for all notifications to registered listeners
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should send events for all notifications to registered listeners
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should register inventory tools
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle get inventory tool execution
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle empty inventory response
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle errors when getting inventory
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/unit/server/notification-delivery.test.ts > Notification Delivery > should allow removing specific listeners
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/resources/index.test.ts > Resources Module Index > should export functions that can be called
Registered catalog resources

stdout | tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle update inventory tool execution
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle failed inventory update
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle errors when updating inventory
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle set inventory replenishment tool execution
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle failed inventory replenishment setting
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle errors when setting inventory replenishment
Registered tool 'get-inventory'
Registered tool 'update-inventory'
Registered tool 'set-inventory-replenishment'

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should override updateOrderStatus method during setup
Periodic order monitoring is disabled
Order status change notifications set up

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should override updateOrderStatus method during setup
Order status monitoring is not running
Order status cache cleared

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should send notification when order status changes
Periodic order monitoring is disabled
Order status change notifications set up

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should send notification when order status changes
Order status monitoring is not running
Order status cache cleared

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should not send notification when order status remains unchanged
Periodic order monitoring is disabled
Order status change notifications set up

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should not send notification when order status remains unchanged
Order status monitoring is not running
Order status cache cleared

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should not send notification when update operation fails
Periodic order monitoring is disabled
Order status change notifications set up

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should not send notification when update operation fails
Order status monitoring is not running
Order status cache cleared

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should check order status and send notification when status changes
Periodic order monitoring is disabled
Order status change notifications set up

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should check order status and send notification when status changes
Order test-order-id status changed from UNSHIPPED to SHIPPED

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should check order status and send notification when status changes
Order status monitoring is not running
Order status cache cleared

 ✓ tests/unit/resources/index.test.ts > Resources Module Index > should export registerCatalogResources 11ms 26 MB heap used
 ✓ tests/unit/resources/index.test.ts > Resources Module Index > should export registerListingsResources 1ms 26 MB heap used
 ✓ tests/unit/resources/index.test.ts > Resources Module Index > should export registerInventoryResources 1ms 27 MB heap used
 ✓ tests/unit/resources/index.test.ts > Resources Module Index > should export registerOrdersResources 1ms 27 MB heap used
 ✓ tests/unit/resources/index.test.ts > Resources Module Index > should export registerReportsResources 4ms 25 MB heap used
 ✓ tests/unit/resources/index.test.ts > Resources Module Index > should export all resource registration functions 1ms 26 MB heap used
 ✓ tests/unit/resources/index.test.ts > Resources Module Index > should handle module initialization without errors 1ms 26 MB heap used
 ✓ tests/unit/resources/index.test.ts > Resources Module Index > should provide consistent export structure 2ms 27 MB heap used
 ✓ tests/unit/resources/index.test.ts > Resources Module Index > should export functions that can be called 6ms 28 MB heap used
stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should not send notification when status remains the same
Periodic order monitoring is disabled
Order status change notifications set up

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should not send notification when status remains the same
Order status monitoring is not running
Order status cache cleared

 ✓ tests/unit/server/notification-delivery.test.ts > Notification Delivery > should not debounce notifications of different types 150ms 23 MB heap used
 ✓ tests/unit/server/notification-delivery.test.ts > Notification Delivery > should format inventory change notifications correctly 1ms 23 MB heap used
 ✓ tests/unit/server/notification-delivery.test.ts > Notification Delivery > should format order status change notifications correctly 0ms 23 MB heap used
 ✓ tests/unit/server/notification-delivery.test.ts > Notification Delivery > should handle errors when sending notifications gracefully 2ms 23 MB heap used
 ✓ tests/unit/server/notification-delivery.test.ts > Notification Delivery > should send events for all notifications to registered listeners 12ms 23 MB heap used
 × tests/unit/server/notification-delivery.test.ts > Notification Delivery > should allow removing specific listeners 1ms 23 MB heap used
   → expected "spy" to be called 1 times, but got 0 times
stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should start and stop monitoring successfully
Periodic order monitoring is disabled
Order status monitoring is not running

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should start and stop monitoring successfully
Order status monitoring is not running
Order status cache cleared

 ✓ tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should register inventory tools 4ms 26 MB heap used
 ✓ tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle get inventory tool execution 2ms 27 MB heap used
 ✓ tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle empty inventory response 2ms 28 MB heap used
 ✓ tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle errors when getting inventory 2ms 29 MB heap used
 ✓ tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle update inventory tool execution 6ms 26 MB heap used
 ✓ tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle failed inventory update 1ms 27 MB heap used
 ✓ tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle errors when updating inventory 1ms 28 MB heap used
 ✓ tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle set inventory replenishment tool execution 1ms 28 MB heap used
 ✓ tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle failed inventory replenishment setting 1ms 29 MB heap used
 ✓ tests/unit/tools/inventory-tools.test.ts > Inventory Tools > should handle errors when setting inventory replenishment 1ms 30 MB heap used
stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should map CONFIRM action to correct status
Periodic order monitoring is disabled
Order status change notifications set up

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should map CONFIRM action to correct status
Order status monitoring is not running
Order status cache cleared

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should map SHIP action to correct status
Periodic order monitoring is disabled
Order status change notifications set up

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should map SHIP action to correct status
Order status monitoring is not running
Order status cache cleared

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should map CANCEL action to correct status
Periodic order monitoring is disabled
Order status change notifications set up

stdout | tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should map CANCEL action to correct status
Order status monitoring is not running
Order status cache cleared

 ✓ tests/unit/types/index.test.ts > Types Module Index > should handle module initialization without errors 6ms 25 MB heap used
 ✓ tests/unit/types/index.test.ts > Types Module Index > should export auth types 2ms 25 MB heap used
 ✓ tests/unit/types/index.test.ts > Types Module Index > should export API types 1ms 26 MB heap used
 ✓ tests/unit/types/index.test.ts > Types Module Index > should provide consistent export structure 1ms 26 MB heap used
 ✓ tests/unit/types/index.test.ts > Types Module Index > should not have runtime values for type exports 2ms 27 MB heap used
 ✓ tests/unit/types/index.test.ts > Types Module Index > should support type imports in TypeScript context 5ms 24 MB heap used
 ✓ tests/unit/types/index.test.ts > Types Module Index > should maintain type module structure 1ms 25 MB heap used
 ✓ tests/unit/types/index.test.ts > Types Module Index > should not interfere with runtime module loading 1ms 26 MB heap used
 ✓ tests/unit/types/index.test.ts > Types Module Index > should support re-export pattern 1ms 26 MB heap used
 ✓ tests/unit/types/index.test.ts > Types Module Index > should maintain module isolation 1ms 27 MB heap used
 ✓ tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should override updateOrderStatus method during setup 3ms 24 MB heap used
 ✓ tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should send notification when order status changes 1ms 25 MB heap used
 ✓ tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should not send notification when order status remains unchanged 1ms 26 MB heap used
 ✓ tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should not send notification when update operation fails 1ms 26 MB heap used
 ✓ tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should check order status and send notification when status changes 2ms 27 MB heap used
 ✓ tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should not send notification when status remains the same 2ms 28 MB heap used
 ✓ tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should start and stop monitoring successfully 8ms 25 MB heap used
 ✓ tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should map CONFIRM action to correct status 1ms 26 MB heap used
 ✓ tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should map SHIP action to correct status 1ms 27 MB heap used
 ✓ tests/unit/server/order-notifications.test.ts > OrderStatusChangeHandler > should map CANCEL action to correct status 1ms 27 MB heap used
 ✓ tests/unit/api/index.test.ts > API Module Index > should export BaseApiClient 3ms 24 MB heap used
 ✓ tests/unit/api/index.test.ts > API Module Index > should export CatalogClient 1ms 25 MB heap used
 ✓ tests/unit/api/index.test.ts > API Module Index > should export ListingsClient 1ms 25 MB heap used
 ✓ tests/unit/api/index.test.ts > API Module Index > should export InventoryClient 1ms 26 MB heap used
 ✓ tests/unit/api/index.test.ts > API Module Index > should export OrdersClient 0ms 26 MB heap used
 ✓ tests/unit/api/index.test.ts > API Module Index > should export ReportsClient 1ms 27 MB heap used
 ✓ tests/unit/api/index.test.ts > API Module Index > should export all API client classes 1ms 28 MB heap used
 ✓ tests/unit/api/index.test.ts > API Module Index > should handle module initialization without errors 1ms 28 MB heap used
 ✓ tests/unit/api/index.test.ts > API Module Index > should provide consistent export structure 1ms 29 MB heap used
 ✓ tests/unit/api/index.test.ts > API Module Index > should export classes that can be instantiated 7ms 30 MB heap used
stdout | tests/unit/tools/listings-tools.test.ts > Listings Tools > should register listings tools
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle create listing tool execution
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle create listing with issues
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle errors when creating a listing
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle update listing tool execution
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle listing not found when updating
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle errors when updating a listing
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle delete listing tool execution
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle delete listing with issues
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

stdout | tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle errors when deleting a listing
Registered tool 'create-listing'
Registered tool 'update-listing'
Registered tool 'delete-listing'

 ✓ tests/unit/tools/listings-tools.test.ts > Listings Tools > should register listings tools 5ms 26 MB heap used
 ✓ tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle create listing tool execution 2ms 27 MB heap used
 ✓ tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle create listing with issues 1ms 28 MB heap used
 ✓ tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle errors when creating a listing 5ms 25 MB heap used
 ✓ tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle update listing tool execution 1ms 26 MB heap used
 ✓ tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle listing not found when updating 1ms 27 MB heap used
 ✓ tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle errors when updating a listing 1ms 27 MB heap used
 ✓ tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle delete listing tool execution 1ms 28 MB heap used
 ✓ tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle delete listing with issues 1ms 29 MB heap used
 ✓ tests/unit/tools/listings-tools.test.ts > Listings Tools > should handle errors when deleting a listing 1ms 30 MB heap used
stdout | tests/unit/utils/error-recovery.test.ts > RetryRecoveryStrategy with specific error types > should use retry-after value from RateLimitExceededError
2025-08-06T01:14:53.190Z [[32minfo[39m]: Retrying operation after error (attempt 1/3)
{
  "errorMessage": "Rate limit exceeded",
  "errorName": "RateLimitExceededError",
  "delayMs": 2000,
  "retryCount": 1,
  "maxRetries": 3
}

stdout | tests/unit/utils/error-recovery.test.ts > RetryRecoveryStrategy with specific error types > should use retry-after value from ThrottlingError
2025-08-06T01:14:53.194Z [[32minfo[39m]: Retrying operation after error (attempt 1/3)
{
  "errorMessage": "Throttling error",
  "errorName": "ThrottlingError",
  "delayMs": 1500,
  "retryCount": 1,
  "maxRetries": 3
}

stdout | tests/unit/utils/error-recovery.test.ts > RetryRecoveryStrategy with specific error types > should use exponential backoff for other errors
2025-08-06T01:14:53.195Z [[32minfo[39m]: Retrying operation after error (attempt 2/3)
{
  "errorMessage": "Network error",
  "errorName": "NetworkError",
  "delayMs": 246.39547682734474,
  "retryCount": 2,
  "maxRetries": 3
}

 ✓ tests/unit/utils/error-recovery.test.ts > CircuitBreakerRecoveryStrategy > should determine if an error can be recovered from 2ms 16 MB heap used
 ✓ tests/unit/utils/error-recovery.test.ts > CircuitBreakerRecoveryStrategy > should open circuit after threshold failures 2ms 17 MB heap used
 ✓ tests/unit/utils/error-recovery.test.ts > CircuitBreakerRecoveryStrategy > should transition to half-open state after timeout 1ms 17 MB heap used
 ✓ tests/unit/utils/error-recovery.test.ts > CircuitBreakerRecoveryStrategy > should reopen circuit if test request fails in half-open state 1ms 17 MB heap used
 ✓ tests/unit/utils/error-recovery.test.ts > FallbackRecoveryStrategy > should use fallback function for recoverable errors 1ms 17 MB heap used
 ✓ tests/unit/utils/error-recovery.test.ts > FallbackRecoveryStrategy > should not recover from non-recoverable errors 0ms 17 MB heap used
 ✓ tests/unit/utils/error-recovery.test.ts > RetryRecoveryStrategy with specific error types > should use retry-after value from RateLimitExceededError 4ms 18 MB heap used
 ✓ tests/unit/utils/error-recovery.test.ts > RetryRecoveryStrategy with specific error types > should use retry-after value from ThrottlingError 1ms 18 MB heap used
 ✓ tests/unit/utils/error-recovery.test.ts > RetryRecoveryStrategy with specific error types > should use exponential backoff for other errors 0ms 18 MB heap used
 ✓ tests/unit/utils/error-recovery.test.ts > ErrorRecoveryManager with multiple strategies > should try strategies in order until one succeeds 0ms 18 MB heap used
 ✓ tests/unit/utils/error-recovery.test.ts > ErrorRecoveryManager with multiple strategies > should throw if no strategy can recover 0ms 18 MB heap used
 ↓ tests/unit/utils/error-recovery.test.ts > Complex error recovery scenarios > should handle multiple retries with increasing backoff
 ↓ tests/unit/utils/error-recovery.test.ts > Complex error recovery scenarios > should integrate circuit breaker with retry strategy
 ✓ tests/unit/auth/index.test.ts > Auth Module Index > should export AmazonAuth class 2ms 23 MB heap used
 ✓ tests/unit/auth/index.test.ts > Auth Module Index > should export CredentialManager class 1ms 24 MB heap used
 ✓ tests/unit/auth/index.test.ts > Auth Module Index > should export MARKETPLACES constant 1ms 25 MB heap used
 ✓ tests/unit/auth/index.test.ts > Auth Module Index > should export authentication types 2ms 25 MB heap used
 ✓ tests/unit/auth/index.test.ts > Auth Module Index > should handle module initialization without errors 2ms 26 MB heap used
 ✓ tests/unit/auth/index.test.ts > Auth Module Index > should provide consistent export structure 1ms 26 MB heap used
 ✓ tests/unit/auth/index.test.ts > Auth Module Index > should export classes that can be instantiated 1ms 27 MB heap used
 ✓ tests/unit/auth/index.test.ts > Auth Module Index > should export MARKETPLACES with valid marketplace data 1ms 28 MB heap used
 ✓ tests/unit/auth/index.test.ts > Auth Module Index > should maintain consistent marketplace ID format 1ms 29 MB heap used
 ✓ tests/unit/api/inventory-client.test.ts > InventoryClient > should retrieve inventory with default parameters successfully 6ms 23 MB heap used
 ✓ tests/unit/api/inventory-client.test.ts > InventoryClient > should retrieve inventory with filter parameters successfully 2ms 24 MB heap used
 ✓ tests/unit/api/inventory-client.test.ts > InventoryClient > should retrieve inventory for specific SKU successfully 1ms 24 MB heap used
 ✓ tests/unit/api/inventory-client.test.ts > InventoryClient > should handle SKU not found error 1ms 24 MB heap used
 ✓ tests/unit/api/inventory-client.test.ts > InventoryClient > should update inventory quantity successfully 1ms 24 MB heap used
 ✓ tests/unit/api/inventory-client.test.ts > InventoryClient > should update inventory with restock date successfully 0ms 24 MB heap used
 ✓ tests/unit/api/inventory-client.test.ts > InventoryClient > should handle inventory update validation errors 1ms 24 MB heap used
 ✓ tests/unit/api/inventory-client.test.ts > InventoryClient > should set inventory replenishment settings successfully 1ms 25 MB heap used
 ✓ tests/unit/api/inventory-client.test.ts > InventoryClient > should set minimal inventory replenishment settings successfully 0ms 25 MB heap used
 ✓ tests/unit/api/inventory-client.test.ts > InventoryClient > should handle replenishment validation errors 0ms 25 MB heap used
stdout | tests/unit/resources/inventory-resources-registration.test.ts > Inventory Resources Registration > should register inventory resources without errors
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources-registration.test.ts > Inventory Resources Registration > should register amazon-inventory resource
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources-registration.test.ts > Inventory Resources Registration > should register amazon-inventory-filter resource
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/unit/resources/inventory-resources-registration.test.ts > Inventory Resources Registration > should register exactly two resources
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

 ✓ tests/unit/api/orders-client.test.ts > OrdersClient > should retrieve orders successfully 8ms 23 MB heap used
 ✓ tests/unit/api/orders-client.test.ts > OrdersClient > should retrieve single order successfully 1ms 24 MB heap used
 ✓ tests/unit/api/orders-client.test.ts > OrdersClient > should retrieve order items successfully 0ms 24 MB heap used
 ✓ tests/unit/api/orders-client.test.ts > OrdersClient > should confirm order successfully 1ms 24 MB heap used
 ✓ tests/unit/api/orders-client.test.ts > OrdersClient > should ship order successfully 1ms 24 MB heap used
 ✓ tests/unit/api/orders-client.test.ts > OrdersClient > should cancel order successfully 0ms 25 MB heap used
 ✓ tests/unit/api/orders-client.test.ts > OrdersClient > should handle missing shipping details error 1ms 25 MB heap used
 ✓ tests/unit/api/orders-client.test.ts > OrdersClient > should handle missing cancellation reason error 0ms 25 MB heap used
 ✓ tests/unit/api/orders-client.test.ts > OrdersClient > should retrieve order buyer info successfully 0ms 25 MB heap used
 ✓ tests/unit/api/orders-client.test.ts > OrdersClient > should retrieve order address successfully 1ms 25 MB heap used
 ✓ tests/unit/api/orders-client.test.ts > OrdersClient > should retrieve order fulfillment successfully 1ms 26 MB heap used
 ✓ tests/unit/api/listings-client.test.ts > ListingsClient > should retrieve all listings successfully 8ms 26 MB heap used
 ✓ tests/unit/api/listings-client.test.ts > ListingsClient > should retrieve specific listing by SKU successfully 1ms 26 MB heap used
 ✓ tests/unit/api/listings-client.test.ts > ListingsClient > should handle pagination correctly 1ms 26 MB heap used
 ✓ tests/unit/api/listings-client.test.ts > ListingsClient > should retrieve single listing by SKU successfully 0ms 27 MB heap used
 ✓ tests/unit/api/listings-client.test.ts > ListingsClient > should handle listing not found error 1ms 27 MB heap used
 ✓ tests/unit/api/listings-client.test.ts > ListingsClient > should create or update listing successfully 1ms 27 MB heap used
 ✓ tests/unit/api/listings-client.test.ts > ListingsClient > should handle listing validation errors 1ms 27 MB heap used
 ✓ tests/unit/api/listings-client.test.ts > ListingsClient > should delete listing successfully 0ms 28 MB heap used
 ✓ tests/unit/api/listings-client.test.ts > ListingsClient > should include issue locale when deleting listing 1ms 28 MB heap used
 ✓ tests/unit/api/listings-client.test.ts > ListingsClient > should handle API errors gracefully 1ms 28 MB heap used
 ✓ tests/unit/resources/inventory-resources-registration.test.ts > Inventory Resources Registration > should register inventory resources without errors 7ms 25 MB heap used
 ✓ tests/unit/resources/inventory-resources-registration.test.ts > Inventory Resources Registration > should register amazon-inventory resource 2ms 25 MB heap used
 ✓ tests/unit/resources/inventory-resources-registration.test.ts > Inventory Resources Registration > should register amazon-inventory-filter resource 1ms 26 MB heap used
 ✓ tests/unit/resources/inventory-resources-registration.test.ts > Inventory Resources Registration > should register exactly two resources 1ms 26 MB heap used
stdout | tests/resources/resources.test.ts > Amazon Seller MCP Resources > should register all resources without errors
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources
Registered resource 'amazon-listings'
Registered listings resources
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources
Registered resource 'amazon-orders'
Registered resource 'amazon-order-action'
Registered resource 'amazon-order-filter'
Registered orders resources
Registered resource 'amazon-reports'
Registered resource 'amazon-report-action'
Registered resource 'amazon-report-filter'
Registered reports resources

stdout | tests/resources/inventory-resources.test.ts > Inventory Resources > should register inventory resources with correct configuration
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/resources/resources.test.ts > Amazon Seller MCP Resources > should register resources with proper configuration
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/resources/inventory-resources.test.ts > Inventory Resources > should create resource templates with proper URI patterns
Registered resource 'amazon-inventory'
Registered resource 'amazon-inventory-filter'
Registered inventory resources

stdout | tests/resources/resources.test.ts > Amazon Seller MCP Resources > should create resource templates with proper URI patterns
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources
Registered resource 'amazon-listings'
Registered listings resources

 ✓ tests/unit/auth/amazon-auth.test.ts > AmazonAuth > should create an instance with valid credentials 3ms 21 MB heap used
 ✓ tests/unit/auth/amazon-auth.test.ts > AmazonAuth > should validate required credentials during initialization 2ms 21 MB heap used
 ✓ tests/unit/auth/amazon-auth.test.ts > AmazonAuth > should validate IAM credentials when provided 1ms 21 MB heap used
 ✓ tests/unit/auth/amazon-auth.test.ts > AmazonAuth > should return cached token when not expired 0ms 21 MB heap used
 ✓ tests/unit/auth/amazon-auth.test.ts > AmazonAuth > should refresh token when expired 1ms 22 MB heap used
 ✓ tests/unit/auth/amazon-auth.test.ts > AmazonAuth > should refresh token when no token exists 2ms 22 MB heap used
 ✓ tests/unit/auth/amazon-auth.test.ts > AmazonAuth > should successfully refresh access token with valid response 3ms 22 MB heap used
 ✓ tests/unit/auth/amazon-auth.test.ts > AmazonAuth > should handle token refresh failures gracefully 2ms 23 MB heap used
 ✓ tests/unit/auth/amazon-auth.test.ts > AmazonAuth > should add access token to request headers 1ms 23 MB heap used
 ✓ tests/unit/auth/amazon-auth.test.ts > AmazonAuth > should sign request with IAM credentials when provided 2ms 23 MB heap used
 ✓ tests/unit/auth/amazon-auth.test.ts > AmazonAuth > should handle authentication failures during request generation 1ms 24 MB heap used
 ✓ tests/resources/resources.test.ts > Amazon Seller MCP Resources > should register all resources without errors 6ms 25 MB heap used
 ✓ tests/resources/resources.test.ts > Amazon Seller MCP Resources > should register resources with proper configuration 1ms 25 MB heap used
 ✓ tests/resources/resources.test.ts > Amazon Seller MCP Resources > should create resource templates with proper URI patterns 0ms 25 MB heap used
 ✓ tests/resources/inventory-resources.test.ts > Inventory Resources > should register inventory resources with correct configuration 7ms 22 MB heap used
 ✓ tests/resources/inventory-resources.test.ts > Inventory Resources > should create resource templates with proper URI patterns 0ms 22 MB heap used
 ✓ tests/unit/api/catalog-client.test.ts > CatalogClient > should retrieve catalog item by ASIN successfully 8ms 25 MB heap used
 ✓ tests/unit/api/catalog-client.test.ts > CatalogClient > should search catalog items by keywords successfully 1ms 25 MB heap used
 ✓ tests/unit/api/catalog-client.test.ts > CatalogClient > should handle catalog item not found error 1ms 25 MB heap used
 ✓ tests/unit/api/catalog-client.test.ts > CatalogClient > should handle search with pagination 0ms 25 MB heap used
 ✓ tests/unit/api/catalog-client.test.ts > CatalogClient > should handle rate limiting errors 0ms 25 MB heap used
stdout | tests/unit/tools/catalog-tools.test.ts > Catalog Tools > should register catalog search and item retrieval tools
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/unit/tools/catalog-tools.test.ts > Catalog Tools > should return formatted search results when searching catalog with keywords
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/unit/tools/catalog-tools.test.ts > Catalog Tools > should return detailed product information when retrieving catalog item by ASIN
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

 ✓ tests/unit/api/reports-client.test.ts > ReportsClient > should create report successfully 6ms 23 MB heap used
 ✓ tests/unit/api/reports-client.test.ts > ReportsClient > should handle report creation validation errors 1ms 23 MB heap used
 ✓ tests/unit/api/reports-client.test.ts > ReportsClient > should handle API request failures 0ms 23 MB heap used
 ✓ tests/unit/api/reports-client.test.ts > ReportsClient > should retrieve report successfully 1ms 23 MB heap used
 ✓ tests/unit/api/reports-client.test.ts > ReportsClient > should retrieve report document successfully 2ms 23 MB heap used
 ✓ tests/unit/api/reports-client.test.ts > ReportsClient > should retrieve reports with default parameters successfully 1ms 24 MB heap used
 ✓ tests/unit/api/reports-client.test.ts > ReportsClient > should retrieve reports with custom parameters successfully 1ms 24 MB heap used
 ✓ tests/unit/api/reports-client.test.ts > ReportsClient > should cancel report successfully 0ms 24 MB heap used
 ✓ tests/unit/api/reports-client.test.ts > ReportsClient > should download report document successfully 0ms 24 MB heap used
 ✓ tests/unit/api/reports-client.test.ts > ReportsClient > should handle compressed report documents 0ms 24 MB heap used
 ✓ tests/unit/api/reports-client.test.ts > ReportsClient > should handle fetch failures when downloading report document 0ms 24 MB heap used
stdout | tests/unit/tools/catalog-tools.test.ts > Catalog Tools > should handle catalog search errors gracefully
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

stdout | tests/unit/tools/catalog-tools.test.ts > Catalog Tools > should handle catalog item retrieval errors gracefully
Registered tool 'search-catalog'
Registered tool 'get-catalog-item'

 ✓ tests/unit/tools/catalog-tools.test.ts > Catalog Tools > should register catalog search and item retrieval tools 4ms 26 MB heap used
 ✓ tests/unit/tools/catalog-tools.test.ts > Catalog Tools > should return formatted search results when searching catalog with keywords 3ms 27 MB heap used
 ✓ tests/unit/tools/catalog-tools.test.ts > Catalog Tools > should return detailed product information when retrieving catalog item by ASIN 7ms 25 MB heap used
 ✓ tests/unit/tools/catalog-tools.test.ts > Catalog Tools > should handle catalog search errors gracefully 1ms 26 MB heap used
 ✓ tests/unit/tools/catalog-tools.test.ts > Catalog Tools > should handle catalog item retrieval errors gracefully 1ms 27 MB heap used
stdout | tests/resources/reports-resources.test.ts > Reports Resources > should register reports resources with correct configuration
Registered resource 'amazon-reports'
Registered resource 'amazon-report-action'
Registered resource 'amazon-report-filter'
Registered reports resources

stdout | tests/resources/reports-resources.test.ts > Reports Resources > should create resource templates with proper URI patterns
Registered resource 'amazon-reports'
Registered resource 'amazon-report-action'
Registered resource 'amazon-report-filter'
Registered reports resources

stdout | tests/resources/listings-resources.test.ts > Listings Resources > should register listings resources with correct configuration
Registered resource 'amazon-listings'
Registered listings resources

 ✓ tests/resources/reports-resources.test.ts > Reports Resources > should register reports resources with correct configuration 10ms 24 MB heap used
 ✓ tests/resources/reports-resources.test.ts > Reports Resources > should create resource templates with proper URI patterns 1ms 24 MB heap used
stderr | tests/unit/server/error-handler.test.ts > handleToolError > should handle AmazonSellerMcpError
Tool error: ValidationError: Invalid input
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/server/error-handler.test.ts:16:19
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runFiles [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3[90m)[39m {
  code: [32m'VALIDATION_ERROR'[39m,
  details: { errors: [ [32m'Invalid SKU'[39m ] },
  cause: [90mundefined[39m
}

stderr | tests/unit/server/error-handler.test.ts > handleToolError > should handle generic Error
Tool error: Error: Generic error
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/server/error-handler.test.ts:27:19
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runFiles [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3[90m)[39m

stderr | tests/unit/server/error-handler.test.ts > handleToolError > should handle non-Error objects
Tool error: String error

 ✓ tests/resources/listings-resources.test.ts > Listings Resources > should register listings resources with correct configuration 10ms 24 MB heap used
stderr | tests/unit/server/error-handler.test.ts > handleResourceError > should handle AmazonSellerMcpError
Resource error: ValidationError: Invalid input
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/server/error-handler.test.ts:49:19
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runFiles [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3[90m)[39m {
  code: [32m'VALIDATION_ERROR'[39m,
  details: { errors: [ [32m'Invalid SKU'[39m ] },
  cause: [90mundefined[39m
}

stderr | tests/unit/server/error-handler.test.ts > handleResourceError > should handle generic Error
Resource error: Error: Generic error
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/server/error-handler.test.ts:64:19
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runFiles [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3[90m)[39m

stderr | tests/unit/server/error-handler.test.ts > wrapToolHandlerWithErrorHandling > should handle errors
Tool error: ServerError: Server error
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/server/error-handler.test.ts:89:19
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runFiles [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3[90m)[39m {
  code: [32m'SERVER_ERROR'[39m,
  details: [90mundefined[39m,
  cause: [90mundefined[39m
}

stderr | tests/unit/server/error-handler.test.ts > wrapResourceHandlerWithErrorHandling > should handle errors
Resource error: ServerError: Server error
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/server/error-handler.test.ts:115:19
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
    at runFiles [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1787:3[90m)[39m {
  code: [32m'SERVER_ERROR'[39m,
  details: [90mundefined[39m,
  cause: [90mundefined[39m
}

 ✓ tests/unit/server/error-handler.test.ts > handleToolError > should handle AmazonSellerMcpError 3ms 15 MB heap used
 ✓ tests/unit/server/error-handler.test.ts > handleToolError > should handle generic Error 0ms 16 MB heap used
 ✓ tests/unit/server/error-handler.test.ts > handleToolError > should handle non-Error objects 0ms 16 MB heap used
 ✓ tests/unit/server/error-handler.test.ts > handleResourceError > should handle AmazonSellerMcpError 0ms 16 MB heap used
 ✓ tests/unit/server/error-handler.test.ts > handleResourceError > should handle generic Error 0ms 16 MB heap used
 ✓ tests/unit/server/error-handler.test.ts > wrapToolHandlerWithErrorHandling > should pass through successful responses 1ms 16 MB heap used
 ✓ tests/unit/server/error-handler.test.ts > wrapToolHandlerWithErrorHandling > should handle errors 1ms 16 MB heap used
 ✓ tests/unit/server/error-handler.test.ts > wrapResourceHandlerWithErrorHandling > should pass through successful responses 1ms 16 MB heap used
 ✓ tests/unit/server/error-handler.test.ts > wrapResourceHandlerWithErrorHandling > should handle errors 0ms 16 MB heap used
stdout | tests/unit/tools/reports-tools.test.ts > Reports Tools > should register reports tools
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/unit/tools/reports-tools.test.ts > Reports Tools > generate-report tool > should handle create report tool execution
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/unit/tools/reports-tools.test.ts > Reports Tools > generate-report tool > should use default marketplace ID if not provided
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/unit/tools/reports-tools.test.ts > Reports Tools > generate-report tool > should handle errors when creating a report
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/unit/tools/reports-tools.test.ts > Reports Tools > get-report tool > should handle get report tool execution
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

stdout | tests/unit/tools/reports-tools.test.ts > Reports Tools > get-report tool > should handle errors when getting a report
Registered tool 'generate-report'
Registered tool 'get-report'
Registered tool 'download-report'
Registered tool 'cancel-report'
Registered tool 'list-reports'
Registered reports tools

 ✓ tests/unit/tools/reports-tools.test.ts > Reports Tools > should register reports tools 6ms 23 MB heap used
 ✓ tests/unit/tools/reports-tools.test.ts > Reports Tools > generate-report tool > should handle create report tool execution 3ms 24 MB heap used
 ✓ tests/unit/tools/reports-tools.test.ts > Reports Tools > generate-report tool > should use default marketplace ID if not provided 1ms 25 MB heap used
 ✓ tests/unit/tools/reports-tools.test.ts > Reports Tools > generate-report tool > should handle errors when creating a report 1ms 25 MB heap used
 ✓ tests/unit/tools/reports-tools.test.ts > Reports Tools > get-report tool > should handle get report tool execution 2ms 26 MB heap used
 ✓ tests/unit/tools/reports-tools.test.ts > Reports Tools > get-report tool > should handle errors when getting a report 2ms 27 MB heap used
stdout | tests/unit/server/tools.test.ts > ToolRegistrationManager > should register a tool successfully
Registered tool 'test-tool'

stdout | tests/unit/api/base-client.test.ts > BaseApiClient > should respect maxRetries parameter and fail after exhausting retries
2025-08-06T01:14:53.572Z [[31merror[39m]: Server error
{
  "statusCode": 500,
  "errorType": "SERVER_ERROR",
  "errorCode": "SERVER_ERROR",
  "errorDetails": {
    "error": "Internal Server Error"
  }
}

stdout | tests/unit/api/base-client.test.ts > BaseApiClient > should respect maxRetries parameter and fail after exhausting retries
2025-08-06T01:14:53.572Z [[32minfo[39m]: Retrying operation after error (attempt 2/2)
{
  "errorMessage": "Server error: API request failed: Request failed with status code 500",
  "errorName": "ServerError",
  "delayMs": 2322.3131661933376,
  "retryCount": 2,
  "maxRetries": 2
}

stdout | tests/unit/server/tools.test.ts > ToolRegistrationManager > should prevent duplicate tool registration
Registered tool 'test-tool'

stderr | tests/unit/server/tools.test.ts > ToolRegistrationManager > should prevent duplicate tool registration
Tool 'test-tool' is already registered

stdout | tests/unit/server/tools.test.ts > ToolRegistrationManager > should handle tool execution errors gracefully
Registered tool 'error-tool'

stderr | tests/unit/server/tools.test.ts > ToolRegistrationManager > should handle tool execution errors gracefully
Error handling tool 'error-tool': Error: Test error
    at handler [90m(/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/server/tools.test.ts:106:13[90m)[39m
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39msrc/server/tools.ts:90:32
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/server/tools.test.ts:112:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
Tool error: Error: Test error
    at handler [90m(/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/server/tools.test.ts:106:13[90m)[39m
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39msrc/server/tools.ts:90:32
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/server/tools.test.ts:112:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

 ✓ tests/unit/server/tools.test.ts > ToolRegistrationManager > should register a tool successfully 4ms 22 MB heap used
 ✓ tests/unit/server/tools.test.ts > ToolRegistrationManager > should prevent duplicate tool registration 1ms 23 MB heap used
 ✓ tests/unit/server/tools.test.ts > ToolRegistrationManager > should handle tool execution errors gracefully 1ms 23 MB heap used
stdout | tests/resources/catalog-resources.test.ts > Catalog Resources > should register catalog resources with correct configuration
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/resources/catalog-resources.test.ts > Catalog Resources > should create resource templates with proper URI patterns
Registered resource 'amazon-catalog'
Registered resource 'amazon-catalog-search'
Registered catalog resources

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should retry network errors with exponential backoff
2025-08-06T01:14:53.613Z [[31merror[39m]: Network error
{
  "errorType": "NETWORK_ERROR",
  "errorCode": "NETWORK_ERROR"
}

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should retry network errors with exponential backoff
2025-08-06T01:14:53.613Z [[32minfo[39m]: Retrying operation after error (attempt 2/3)
{
  "errorMessage": "Network error: API request failed: Connection failed",
  "errorName": "NetworkError",
  "delayMs": 2472.01868617348,
  "retryCount": 2,
  "maxRetries": 3
}

stdout | tests/unit/server/resources.test.ts > ResourceRegistrationManager > should register resource successfully
Registered resource 'catalog-item'

stdout | tests/unit/server/resources.test.ts > ResourceRegistrationManager > should prevent duplicate resource registration
Registered resource 'catalog-item'

stderr | tests/unit/server/resources.test.ts > ResourceRegistrationManager > should prevent duplicate resource registration
Resource 'catalog-item' is already registered

stdout | tests/unit/server/resources.test.ts > ResourceRegistrationManager > should handle resource handler errors appropriately
Registered resource 'catalog-item'

 ✓ tests/resources/catalog-resources.test.ts > Catalog Resources > should register catalog resources with correct configuration 9ms 22 MB heap used
 ✓ tests/resources/catalog-resources.test.ts > Catalog Resources > should create resource templates with proper URI patterns 1ms 22 MB heap used
stderr | tests/unit/server/resources.test.ts > ResourceRegistrationManager > should handle resource handler errors appropriately
Error handling resource 'catalog-item': Error: Test error
    at handler [90m(/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/server/resources.test.ts:125:13[90m)[39m
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39msrc/server/resources.ts:115:24
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/server/resources.test.ts:132:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m
Resource error: Error: Test error
    at handler [90m(/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/server/resources.test.ts:125:13[90m)[39m
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39msrc/server/resources.ts:115:24
    at [90m/Users/eterzi/kiro-projects/amazon-seller-mcp/[39mtests/unit/server/resources.test.ts:132:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at [90mfile:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (<anonymous>)
    at runWithTimeout [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10[90m)[39m
    at runTest [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12[90m)[39m
    at runSuite [90m(file:///Users/eterzi/kiro-projects/amazon-seller-mcp/[39mnode_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8[90m)[39m

 ✓ tests/unit/server/resources.test.ts > ResourceRegistrationManager > should create resource template with URI pattern 2ms 22 MB heap used
 ✓ tests/unit/server/resources.test.ts > ResourceRegistrationManager > should register resource successfully 2ms 23 MB heap used
 ✓ tests/unit/server/resources.test.ts > ResourceRegistrationManager > should prevent duplicate resource registration 1ms 23 MB heap used
 ✓ tests/unit/server/resources.test.ts > ResourceRegistrationManager > should handle resource handler errors appropriately 2ms 24 MB heap used
stdout | tests/unit/server/order-status-monitoring-integration.test.ts > Order Status Monitoring Integration > should detect order status changes during monitoring
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Periodic order monitoring is disabled
Order status change notifications set up

stdout | tests/unit/server/order-status-monitoring-integration.test.ts > Order Status Monitoring Integration > should detect order status changes during monitoring
Order test-order-2 status changed from PENDING to SHIPPED

stdout | tests/unit/server/order-status-monitoring-integration.test.ts > Order Status Monitoring Integration > should detect order status changes during monitoring
Checked 2 orders for status changes

stdout | tests/unit/server/order-status-monitoring-integration.test.ts > Order Status Monitoring Integration > should detect order status changes during monitoring
Order status monitoring is not running
Order status cache cleared

stdout | tests/unit/server/order-status-monitoring-integration.test.ts > Order Status Monitoring Integration > should handle errors during monitoring
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Periodic order monitoring is disabled
Order status change notifications set up

stdout | tests/unit/server/order-status-monitoring-integration.test.ts > Order Status Monitoring Integration > should handle errors during monitoring
Order status monitoring is not running
Order status cache cleared

stdout | tests/unit/server/notification-delivery-integration.test.ts > Notification Delivery Integration > should format inventory notifications correctly
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notification-delivery-integration.test.ts > Notification Delivery Integration > should format order status notifications correctly
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notification-delivery-integration.test.ts > Notification Delivery Integration > should handle notification delivery errors gracefully
Notification manager initialized (debounced: false, debounceTime: 1000ms)

stdout | tests/unit/server/notification-delivery-integration.test.ts > Notification Delivery Integration > should handle notification delivery errors gracefully
Notification: Inventory Change: SKU TEST-SKU-123 - Inventory quantity changed from 10 to 5

 ✓ tests/unit/server/notification-delivery-integration.test.ts > Notification Delivery Integration > should format inventory notifications correctly 3ms 14 MB heap used
 ✓ tests/unit/server/notification-delivery-integration.test.ts > Notification Delivery Integration > should format order status notifications correctly 0ms 14 MB heap used
 ✓ tests/unit/server/notification-delivery-integration.test.ts > Notification Delivery Integration > should handle notification delivery errors gracefully 1ms 14 MB heap used
 ✓ tests/unit/server/order-status-monitoring-integration.test.ts > Order Status Monitoring Integration > should detect order status changes during monitoring 4ms 23 MB heap used
 ✓ tests/unit/server/order-status-monitoring-integration.test.ts > Order Status Monitoring Integration > should handle errors during monitoring 1ms 24 MB heap used
stdout | tests/resources/orders-resources.test.ts > Orders Resources > should register orders resources with correct configuration
Registered resource 'amazon-orders'
Registered resource 'amazon-order-action'
Registered resource 'amazon-order-filter'
Registered orders resources

stdout | tests/resources/orders-resources.test.ts > Orders Resources > should create resource templates with proper URI patterns
Registered resource 'amazon-orders'
Registered resource 'amazon-order-action'
Registered resource 'amazon-order-filter'
Registered orders resources

stdout | tests/unit/server/order-notifications-integration.test.ts > Order Status Change Notifications Integration > should send notification when order status is updated
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Periodic order monitoring is disabled
Order status change notifications set up

stdout | tests/unit/server/order-notifications-integration.test.ts > Order Status Change Notifications Integration > should send notification when order status is updated
Order status monitoring is not running
Order status cache cleared

stdout | tests/unit/server/order-notifications-integration.test.ts > Order Status Change Notifications Integration > should handle errors when getting current order
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Periodic order monitoring is disabled
Order status change notifications set up

 ✓ tests/resources/orders-resources.test.ts > Orders Resources > should register orders resources with correct configuration 8ms 22 MB heap used
 ✓ tests/resources/orders-resources.test.ts > Orders Resources > should create resource templates with proper URI patterns 1ms 22 MB heap used
stdout | tests/unit/server/order-notifications-integration.test.ts > Order Status Change Notifications Integration > should handle errors when getting current order
Order status monitoring is not running
Order status cache cleared

stdout | tests/unit/server/order-notifications-integration.test.ts > Order Status Change Notifications Integration > should not send notification when order status does not change
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Periodic order monitoring is disabled
Order status change notifications set up

stdout | tests/unit/server/order-notifications-integration.test.ts > Order Status Change Notifications Integration > should not send notification when order status does not change
Order status monitoring is not running
Order status cache cleared

 ✓ tests/utils/mock-factories/index.test.ts > Mock Factories Index > resetAllFactories > should be a function that warns about direct imports 2ms 14 MB heap used
 ✓ tests/utils/mock-factories/index.test.ts > Mock Factories Index > exports > should export all required types and classes 0ms 14 MB heap used
 ✓ tests/utils/mock-factories/index.test.ts > Mock Factories Index > exports > should allow creating individual factories 0ms 14 MB heap used
 ✓ tests/utils/mock-factories/index.test.ts > Mock Factories Index > exports > should allow using the registry directly 0ms 14 MB heap used
 ✓ tests/unit/server/order-notifications-integration.test.ts > Order Status Change Notifications Integration > should send notification when order status is updated 5ms 23 MB heap used
 ✓ tests/unit/server/order-notifications-integration.test.ts > Order Status Change Notifications Integration > should handle errors when getting current order 1ms 24 MB heap used
 ✓ tests/unit/server/order-notifications-integration.test.ts > Order Status Change Notifications Integration > should not send notification when order status does not change 0ms 24 MB heap used
stdout | tests/unit/server/inventory-notifications.test.ts > Inventory Change Notifications > should send notification when inventory is updated
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Inventory change notifications set up

stderr | tests/unit/server/inventory-notifications.test.ts > Inventory Change Notifications > should send notification when inventory is updated
Could not get current inventory for SKU TEST-SKU-123: currentInventory.inventoryDetails.find is not a function

stdout | tests/unit/server/inventory-notifications.test.ts > Inventory Change Notifications > should not send notification when emitNotification is disabled
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Inventory change notifications set up

 ✓ tests/unit/server/inventory-notifications.test.ts > Inventory Change Notifications > should send notification when inventory is updated 5ms 23 MB heap used
 ✓ tests/unit/server/inventory-notifications.test.ts > Inventory Change Notifications > should not send notification when emitNotification is disabled 1ms 23 MB heap used
stdout | tests/unit/server/inventory-notifications-integration.test.ts > Inventory Change Notifications Integration > should send notification when inventory is updated
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Inventory change notifications set up

stdout | tests/unit/server/inventory-notifications-integration.test.ts > Inventory Change Notifications Integration > should handle errors when getting current inventory
Notification manager initialized (debounced: false, debounceTime: 1000ms)
Inventory change notifications set up

 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createCredentials > should create valid Amazon credentials with defaults 1ms 22 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createCredentials > should allow overriding credential properties 0ms 22 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createAuthConfig > should create valid auth configuration 0ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createAuthConfig > should allow overriding auth config properties 0ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createAuthTokens > should create valid auth tokens 1ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createAuthTokens > should allow overriding token properties 0ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createApiClientConfig > should create valid API client configuration 0ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createApiResponse > should create valid API response with provided data 0ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createApiResponse > should allow overriding response properties 0ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createApiError > should create valid API error with defaults 0ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createApiError > should allow customizing error properties 0ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createAuthError > should create valid auth error with defaults 0ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createAuthError > should allow customizing auth error properties 0ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createCatalogItem > should create valid catalog item data 0ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createOrder > should create valid order data 0ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createInventorySummary > should create valid inventory summary data 0ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createListing > should create valid listing data 0ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createRandomData > should generate random data utilities 1ms 23 MB heap used
 ✓ tests/utils/test-data-builder.test.ts > TestDataBuilder > createRandomData > should generate different random values on multiple calls 0ms 24 MB heap used
 ✓ tests/unit/server/inventory-notifications-integration.test.ts > Inventory Change Notifications Integration > should send notification when inventory is updated 3ms 20 MB heap used
 ✓ tests/unit/server/inventory-notifications-integration.test.ts > Inventory Change Notifications Integration > should handle errors when getting current inventory 1ms 20 MB heap used
 ✓ tests/unit/auth/credential-manager.test.ts > CredentialManager > should load credentials from environment variables 1ms 21 MB heap used
 ✓ tests/unit/auth/credential-manager.test.ts > CredentialManager > should load credentials with minimal required fields 0ms 21 MB heap used
 ✓ tests/unit/auth/credential-manager.test.ts > CredentialManager > should resolve marketplace from marketplace code when using US marketplace 0ms 21 MB heap used
 ✓ tests/unit/auth/credential-manager.test.ts > CredentialManager > should throw AuthError when required credentials are missing 0ms 21 MB heap used
 ✓ tests/unit/auth/credential-manager.test.ts > CredentialManager > should throw AuthError when region is invalid 0ms 21 MB heap used
 ✓ tests/unit/auth/credential-manager.test.ts > CredentialManager > should throw AuthError when marketplaceId is missing 0ms 21 MB heap used
 ✓ tests/unit/auth/credential-manager.test.ts > CredentialManager > should handle different Amazon regions correctly 0ms 22 MB heap used
 ✓ tests/unit/auth/credential-manager.test.ts > CredentialManager > should return marketplace configuration for valid country code 0ms 22 MB heap used
 ✓ tests/unit/auth/credential-manager.test.ts > CredentialManager > should handle case-insensitive country codes 0ms 22 MB heap used
 ✓ tests/unit/auth/credential-manager.test.ts > CredentialManager > should return correct marketplace for different countries 0ms 22 MB heap used
 ✓ tests/unit/auth/credential-manager.test.ts > CredentialManager > should throw AuthError for invalid country code 0ms 22 MB heap used
 ✓ tests/unit/auth/credential-manager.test.ts > CredentialManager > should return marketplace configuration for valid marketplace ID 0ms 22 MB heap used
 ✓ tests/unit/auth/credential-manager.test.ts > CredentialManager > should return correct marketplace for different marketplace IDs 0ms 22 MB heap used
 ✓ tests/unit/auth/credential-manager.test.ts > CredentialManager > should throw AuthError for invalid marketplace ID 0ms 22 MB heap used
stdout | tests/unit/tools/orders-tools-registration.test.ts > Orders Tools Registration > should register orders tools
Registered tool 'get-orders'
Registered tool 'get-order'
Registered tool 'process-order'
Registered tool 'update-order-status'
Registered tool 'fulfill-order'

 ✓ tests/unit/tools/orders-tools-registration.test.ts > Orders Tools Registration > should register orders tools 4ms 25 MB heap used
 ✓ tests/utils/index.test.ts > Test Utilities Index > should export TestDataBuilder 1ms 25 MB heap used
 ✓ tests/utils/index.test.ts > Test Utilities Index > should export TestAssertions 0ms 25 MB heap used
 ✓ tests/utils/index.test.ts > Test Utilities Index > should export TestSetup 0ms 25 MB heap used
 ✓ tests/utils/index.test.ts > Test Utilities Index > should export mock factories 0ms 25 MB heap used
 ✓ tests/utils/index.test.ts > Test Utilities Index > should export types 0ms 25 MB heap used
stdout | tests/unit/api/base-client.test.ts > BaseApiClient > should respect maxRetries parameter and fail after exhausting retries
2025-08-06T01:14:55.896Z [[31merror[39m]: Server error
{
  "statusCode": 500,
  "errorType": "SERVER_ERROR",
  "errorCode": "SERVER_ERROR",
  "errorDetails": {
    "error": "Internal Server Error"
  }
}

stdout | tests/unit/api/base-client.test.ts > BaseApiClient > should respect maxRetries parameter and fail after exhausting retries
2025-08-06T01:14:55.896Z [[31merror[39m]: Retry failed after 2 attempts
{
  "errorMessage": "Server error: API request failed: Request failed with status code 500",
  "errorName": "ServerError",
  "maxRetries": 2
}

 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should respect maxRetries parameter and fail after exhausting retries 3432ms 25 MB heap used
 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should cache responses and return cached values on subsequent calls 2ms 26 MB heap used
 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should clear specific cache keys when requested 1ms 26 MB heap used
 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should clear all cache when no specific key is provided 1ms 27 MB heap used
 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should not cache errors and retry function calls on subsequent attempts 1ms 27 MB heap used
 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should build URLs correctly with path only 3ms 24 MB heap used
 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should build URLs correctly with query parameters 1ms 24 MB heap used
 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should filter out undefined query parameters when building URLs 0ms 25 MB heap used
 ✓ tests/unit/api/base-client.test.ts > BaseApiClient > should ensure paths start with a slash when building URLs 0ms 25 MB heap used
 ✓ tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should retry network errors with exponential backoff 3623ms 21 MB heap used
stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should retry server errors up to max retry limit
2025-08-06T01:14:56.089Z [[31merror[39m]: Server error
{
  "statusCode": 500,
  "errorType": "SERVER_ERROR",
  "errorCode": "SERVER_ERROR"
}

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should retry server errors up to max retry limit
2025-08-06T01:14:56.089Z [[32minfo[39m]: Retrying operation after error (attempt 1/2)
{
  "errorMessage": "Server error: API request failed: Internal server error",
  "errorName": "ServerError",
  "delayMs": 1000.846916431688,
  "retryCount": 1,
  "maxRetries": 2
}

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should retry server errors up to max retry limit
2025-08-06T01:14:57.091Z [[31merror[39m]: Server error
{
  "statusCode": 500,
  "errorType": "SERVER_ERROR",
  "errorCode": "SERVER_ERROR"
}

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should retry server errors up to max retry limit
2025-08-06T01:14:57.091Z [[32minfo[39m]: Retrying operation after error (attempt 2/2)
{
  "errorMessage": "Server error: API request failed: Internal server error",
  "errorName": "ServerError",
  "delayMs": 2071.879095097956,
  "retryCount": 2,
  "maxRetries": 2
}

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should retry server errors up to max retry limit
2025-08-06T01:14:59.163Z [[31merror[39m]: Server error
{
  "statusCode": 500,
  "errorType": "SERVER_ERROR",
  "errorCode": "SERVER_ERROR"
}

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should retry server errors up to max retry limit
2025-08-06T01:14:59.164Z [[31merror[39m]: Retry failed after 2 attempts
{
  "errorMessage": "Server error: API request failed: Internal server error",
  "errorName": "ServerError",
  "maxRetries": 2
}

 ✓ tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should retry server errors up to max retry limit 3078ms 22 MB heap used
stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should respect retry-after header for rate limit errors
2025-08-06T01:14:59.167Z [[33mwarn[39m]: Rate limit exceeded
{
  "errorType": "RATE_LIMIT_EXCEEDED",
  "errorCode": "RATE_LIMIT_EXCEEDED",
  "retryAfterMs": 1000
}

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should respect retry-after header for rate limit errors
2025-08-06T01:14:59.167Z [[32minfo[39m]: Retrying operation after error (attempt 1/3)
{
  "errorMessage": "Rate limit exceeded: API request failed: Rate limit exceeded",
  "errorName": "RateLimitExceededError",
  "delayMs": 1000,
  "retryCount": 1,
  "maxRetries": 3
}

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should not retry client validation errors
2025-08-06T01:14:59.170Z [[31merror[39m]: Validation error
{
  "errorType": "VALIDATION_ERROR",
  "errorCode": "VALIDATION_ERROR"
}

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should translate API errors to domain-specific errors
2025-08-06T01:14:59.171Z [[31merror[39m]: Authentication error
{
  "statusCode": 401,
  "errorType": "AUTH_ERROR",
  "errorCode": "AUTHENTICATION_ERROR"
}

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should use error recovery manager for complex retry scenarios
2025-08-06T01:14:59.172Z [[31merror[39m]: Network error
{
  "errorType": "NETWORK_ERROR",
  "errorCode": "NETWORK_ERROR"
}

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should use error recovery manager for complex retry scenarios
2025-08-06T01:14:59.172Z [[32minfo[39m]: Retrying operation after error (attempt 1/3)
{
  "errorMessage": "Network error: API request failed: Network timeout",
  "errorName": "NetworkError",
  "delayMs": 1142.1629574517376,
  "retryCount": 1,
  "maxRetries": 3
}

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should use error recovery manager for complex retry scenarios
2025-08-06T01:15:00.314Z [[31merror[39m]: Server error
{
  "statusCode": 500,
  "errorType": "SERVER_ERROR",
  "errorCode": "SERVER_ERROR"
}

stdout | tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should use error recovery manager for complex retry scenarios
2025-08-06T01:15:00.314Z [[32minfo[39m]: Retrying operation after error (attempt 2/3)
{
  "errorMessage": "Server error: API request failed: Server unavailable",
  "errorName": "ServerError",
  "delayMs": 2467.2963226295833,
  "retryCount": 2,
  "maxRetries": 3
}

 ✓ tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should respect retry-after header for rate limit errors 3ms 23 MB heap used
 ✓ tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should not retry client validation errors 1ms 23 MB heap used
 ✓ tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should translate API errors to domain-specific errors 1ms 24 MB heap used
 ✓ tests/unit/api/api-error-recovery.test.ts > API Error Recovery > should use error recovery manager for complex retry scenarios 1ms 25 MB heap used

⎯⎯⎯⎯⎯⎯ Failed Suites 2 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  tests/unit/server/integration.test.ts [ tests/unit/server/integration.test.ts ]
Error: Transform failed with 1 error:
/Users/eterzi/kiro-projects/amazon-seller-mcp/tests/unit/server/integration.test.ts:47:6: ERROR: The symbol "server" has already been declared
  Plugin: vite:esbuild
  File: /Users/eterzi/kiro-projects/amazon-seller-mcp/tests/unit/server/integration.test.ts:47:6
  
  The symbol "server" has already been declared
  45 |    });
  46 |  
  47 |    let server: AmazonSellerMcpServer;
     |        ^
  48 |  
  49 |    beforeEach(async () => {
  
 ❯ failureErrorWithLog node_modules/esbuild/lib/main.js:1467:15
 ❯ node_modules/esbuild/lib/main.js:736:50
 ❯ responseCallbacks.<computed> node_modules/esbuild/lib/main.js:603:9
 ❯ handleIncomingPacket node_modules/esbuild/lib/main.js:658:12
 ❯ Socket.readFromStdout node_modules/esbuild/lib/main.js:581:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/67]⎯

 FAIL  tests/unit/utils/performance-optimization.test.ts [ tests/unit/utils/performance-optimization.test.ts ]
Error: Transform failed with 1 error:
/Users/eterzi/kiro-projects/amazon-seller-mcp/tests/unit/utils/performance-optimization.test.ts:26:25: ERROR: "await" can only be used inside an "async" function
  Plugin: vite:esbuild
  File: /Users/eterzi/kiro-projects/amazon-seller-mcp/tests/unit/utils/performance-optimization.test.ts:26:25
  
  "await" can only be used inside an "async" function
  24 |      
  25 |      // Setup file system mocks using centralized approach
  26 |      const fs = vi.mocked(await import('fs'));
     |                           ^
  27 |      fs.promises.mkdir = vi.fn().mockResolvedValue(undefined);
  28 |      fs.promises.access = vi.fn().mockResolvedValue(undefined);
  
 ❯ failureErrorWithLog node_modules/esbuild/lib/main.js:1467:15
 ❯ node_modules/esbuild/lib/main.js:736:50
 ❯ responseCallbacks.<computed> node_modules/esbuild/lib/main.js:603:9
 ❯ handleIncomingPacket node_modules/esbuild/lib/main.js:658:12
 ❯ Socket.readFromStdout node_modules/esbuild/lib/main.js:581:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/67]⎯


⎯⎯⎯⎯⎯⎯ Failed Tests 45 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should support complete product listing workflow from catalog search to publication
AssertionError: expected true to be falsy

[32m- Expected[39m
[31m+ Received[39m

[32m- false[39m
[31m+ true[39m

 ❯ tests/integration/end-to-end.test.ts:235:34
    233| 
    234|     // Assert - Verify complete workflow execution
    235|     expect(searchResult.isError).toBeFalsy();
       |                                  ^
    236|     expect(createResult.isError).toBeFalsy();
    237|     expect(inventoryResult.isError).toBeFalsy();

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/67]⎯

 FAIL  tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should complete order fulfillment workflow from retrieval to shipment
AssertionError: expected true to be falsy

[32m- Expected[39m
[31m+ Received[39m

[32m- false[39m
[31m+ true[39m

 ❯ tests/integration/end-to-end.test.ts:316:34
    314| 
    315|     // Assert - Verify complete order fulfillment workflow
    316|     expect(ordersResult.isError).toBeFalsy();
       |                                  ^
    317|     expect(orderResult.isError).toBeFalsy();
    318|     expect(inventoryResult.isError).toBeFalsy();

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/67]⎯

 FAIL  tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should recover gracefully from temporary API failures during operations
AssertionError: expected true to be falsy

[32m- Expected[39m
[31m+ Received[39m

[32m- false[39m
[31m+ true[39m

 ❯ tests/integration/end-to-end.test.ts:368:28
    366| 
    367|     // Assert - Verify recovery behavior
    368|     expect(result.isError).toBeFalsy();
       |                            ^
    369|     TestAssertions.expectErrorRecovery(mockSpApiClient.getOrder, 1, ex…
    370|     TestAssertions.expectValidOrder(result.data, orderId);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/67]⎯

 FAIL  tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle rate limiting gracefully across multiple concurrent operations
AssertionError: expected true to be falsy

[32m- Expected[39m
[31m+ Received[39m

[32m- false[39m
[31m+ true[39m

 ❯ tests/integration/end-to-end.test.ts:401:32
    399|     results.forEach((result, index) => {
    400|       if (index < 2) {
    401|         expect(result.isError).toBeFalsy();
       |                                ^
    402|       } else {
    403|         // Third call should handle rate limiting gracefully
 ❯ tests/integration/end-to-end.test.ts:399:13

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/67]⎯

 FAIL  tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should provide consistent data access through tools
AssertionError: expected true to be falsy

[32m- Expected[39m
[31m+ Received[39m

[32m- false[39m
[31m+ true[39m

 ❯ tests/integration/end-to-end.test.ts:435:32
    433| 
    434|     // Assert - Verify tool data access behavior
    435|     expect(toolResult.isError).toBeFalsy();
       |                                ^
    436|     
    437|     // Verify the tool returns expected data structure

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/67]⎯

 FAIL  tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should handle catalog search and return structured results
AssertionError: expected true to be falsy

[32m- Expected[39m
[31m+ Received[39m

[32m- false[39m
[31m+ true[39m

 ❯ tests/integration/end-to-end.test.ts:465:34
    463| 
    464|     // Assert - Verify search result behavior
    465|     expect(searchResult.isError).toBeFalsy();
       |                                  ^
    466|     expect(searchResult.content).toBeDefined();
    467|     expect(searchResult.content[0]).toMatchObject({

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/67]⎯

 FAIL  tests/integration/end-to-end.test.ts > Amazon Seller MCP End-to-End Workflows > should send notifications when inventory changes during business workflows
AssertionError: expected true to be falsy

[32m- Expected[39m
[31m+ Received[39m

[32m- false[39m
[31m+ true[39m

 ❯ tests/integration/end-to-end.test.ts:511:34
    509| 
    510|     // Assert - Verify notification behavior during workflow
    511|     expect(updateResult.isError).toBeFalsy();
       |                                  ^
    512|     expect(notificationSpy).toHaveBeenCalledWith(
    513|       expect.objectContaining({

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle token refresh failures gracefully
AssertionError: expected { data: {}, statusCode: 200, …(1) } to be an instance of AuthError
 ❯ tests/unit/api/api-error-handling.test.ts:94:19
     92|     }).catch(e => e);
     93| 
     94|     expect(error).toBeInstanceOf(AuthError);
       |                   ^
     95|     expect(error.message).toContain('Failed to refresh access token');
     96|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle token refresh failures gracefully
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle request signing failures gracefully
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle connection timeouts appropriately
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle connection refused errors appropriately
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle 400 Bad Request errors with validation details
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle 401 Unauthorized errors appropriately
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle 403 Forbidden errors appropriately
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle 429 Rate Limit errors with retry information
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle 500 Server errors appropriately
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should retry server errors until success
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should retry rate limit errors with backoff
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should not retry client errors
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should respect custom maxRetries configuration
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should parse and handle rate limit headers correctly
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle catalog item not found errors gracefully
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should validate inventory update parameters before making requests
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should validate listing creation parameters before making requests
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle listing not found scenarios appropriately
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should validate order shipping details before processing
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should validate order cancellation details before processing
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should validate report creation parameters before making requests
 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle report download failures gracefully
TypeError: MockFactoryRegistry.resetAll is not a function
 ❯ tests/unit/api/api-error-handling.test.ts:77:25
     75| 
     76|   afterEach(() => {
     77|     MockFactoryRegistry.resetAll();
       |                         ^
     78|     vi.clearAllMocks();
     79|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle request signing failures gracefully
AssertionError: expected { data: {}, statusCode: 200, …(1) } to be an instance of AuthError
 ❯ tests/unit/api/api-error-handling.test.ts:111:19
    109|     }).catch(e => e);
    110| 
    111|     expect(error).toBeInstanceOf(AuthError);
       |                   ^
    112|     expect(error.message).toContain('Failed to sign request');
    113|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle connection timeouts appropriately
AssertionError: expected { data: {}, statusCode: 200, …(1) } to be an instance of ApiError
 ❯ Function.expectApiError tests/utils/test-assertions.ts:134:19
    132|     expectedStatusCode?: number
    133|   ): void {
    134|     expect(error).toBeInstanceOf(ApiError);
       |                   ^
    135|     expect(error.type).toBe(expectedType);
    136|     
 ❯ tests/unit/api/api-error-handling.test.ts:128:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle connection refused errors appropriately
AssertionError: expected { data: {}, statusCode: 200, …(1) } to be an instance of ApiError
 ❯ Function.expectApiError tests/utils/test-assertions.ts:134:19
    132|     expectedStatusCode?: number
    133|   ): void {
    134|     expect(error).toBeInstanceOf(ApiError);
       |                   ^
    135|     expect(error.type).toBe(expectedType);
    136|     
 ❯ tests/unit/api/api-error-handling.test.ts:144:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle 400 Bad Request errors with validation details
AssertionError: expected { data: {}, statusCode: 200, …(1) } to be an instance of ApiError
 ❯ Function.expectApiError tests/utils/test-assertions.ts:134:19
    132|     expectedStatusCode?: number
    133|   ): void {
    134|     expect(error).toBeInstanceOf(ApiError);
       |                   ^
    135|     expect(error.type).toBe(expectedType);
    136|     
 ❯ tests/unit/api/api-error-handling.test.ts:169:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[15/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle 401 Unauthorized errors appropriately
AssertionError: expected { data: {}, statusCode: 200, …(1) } to be an instance of ApiError
 ❯ Function.expectApiError tests/utils/test-assertions.ts:134:19
    132|     expectedStatusCode?: number
    133|   ): void {
    134|     expect(error).toBeInstanceOf(ApiError);
       |                   ^
    135|     expect(error.type).toBe(expectedType);
    136|     
 ❯ tests/unit/api/api-error-handling.test.ts:194:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[16/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle 403 Forbidden errors appropriately
AssertionError: expected { data: {}, statusCode: 200, …(1) } to be an instance of ApiError
 ❯ Function.expectApiError tests/utils/test-assertions.ts:134:19
    132|     expectedStatusCode?: number
    133|   ): void {
    134|     expect(error).toBeInstanceOf(ApiError);
       |                   ^
    135|     expect(error.type).toBe(expectedType);
    136|     
 ❯ tests/unit/api/api-error-handling.test.ts:211:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[17/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle 429 Rate Limit errors with retry information
AssertionError: expected { data: {}, statusCode: 200, …(1) } to be an instance of ApiError
 ❯ Function.expectApiError tests/utils/test-assertions.ts:134:19
    132|     expectedStatusCode?: number
    133|   ): void {
    134|     expect(error).toBeInstanceOf(ApiError);
       |                   ^
    135|     expect(error.type).toBe(expectedType);
    136|     
 ❯ tests/unit/api/api-error-handling.test.ts:236:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[18/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle 500 Server errors appropriately
AssertionError: expected { data: {}, statusCode: 200, …(1) } to be an instance of ApiError
 ❯ Function.expectApiError tests/utils/test-assertions.ts:134:19
    132|     expectedStatusCode?: number
    133|   ): void {
    134|     expect(error).toBeInstanceOf(ApiError);
       |                   ^
    135|     expect(error.type).toBe(expectedType);
    136|     
 ❯ tests/unit/api/api-error-handling.test.ts:253:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[19/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should retry server errors until success
AssertionError: expected "spy" to be called at least once
 ❯ tests/unit/api/api-error-handling.test.ts:270:36
    268|     });
    269| 
    270|     expect(mockBaseClient.request).toHaveBeenCalled();
       |                                    ^
    271|     TestAssertions.expectSuccessResponse(result, successData);
    272|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[20/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should retry rate limit errors with backoff
AssertionError: expected "spy" to be called at least once
 ❯ tests/unit/api/api-error-handling.test.ts:288:36
    286|     });
    287| 
    288|     expect(mockBaseClient.request).toHaveBeenCalled();
       |                                    ^
    289|     TestAssertions.expectSuccessResponse(result, successData);
    290|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[21/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should not retry client errors
AssertionError: promise resolved "{ data: {}, statusCode: 200, …(1) }" instead of rejecting

[32m- Expected[39m
[31m+ Received[39m

[32m- Error {[39m
[32m-   "message": "rejected promise",[39m
[31m+ {[39m
[31m+   "data": {},[39m
[31m+   "headers": {},[39m
[31m+   "statusCode": 200,[39m
[2m  }[22m

 ❯ tests/unit/api/api-error-handling.test.ts:305:5
    303|         path: '/test',
    304|       })
    305|     ).rejects.toThrow();
       |     ^
    306| 
    307|     expect(mockBaseClient.request).toHaveBeenCalledTimes(1);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[22/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should respect custom maxRetries configuration
AssertionError: promise resolved "{ data: {}, statusCode: 200, …(1) }" instead of rejecting

[32m- Expected[39m
[31m+ Received[39m

[32m- Error {[39m
[32m-   "message": "rejected promise",[39m
[31m+ {[39m
[31m+   "data": {},[39m
[31m+   "headers": {},[39m
[31m+   "statusCode": 200,[39m
[2m  }[22m

 ❯ tests/unit/api/api-error-handling.test.ts:324:5
    322|         maxRetries: 2,
    323|       })
    324|     ).rejects.toThrow();
       |     ^
    325| 
    326|     expect(mockBaseClient.request).toHaveBeenCalled();

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[23/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should parse and handle rate limit headers correctly
AssertionError: expected {} to match object { success: true }

[32m- Expected[39m
[31m+ Received[39m

[32m- {[39m
[32m-   "success": true,[39m
[32m- }[39m
[31m+ {}[39m

 ❯ Function.expectSuccessResponse tests/utils/test-assertions.ts:107:29
    105|     
    106|     if (expectedData) {
    107|       expect(response.data).toMatchObject(expectedData);
       |                             ^
    108|     }
    109|     
 ❯ tests/unit/api/api-error-handling.test.ts:353:20

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[24/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle catalog item not found errors gracefully
TypeError: catalogClient.getCatalogItem is not a function
 ❯ tests/unit/api/api-error-handling.test.ts:371:39
    369| 
    370|     const catalogClient = new CatalogClient(TestDataBuilder.createAuth…
    371|     const error = await catalogClient.getCatalogItem({ asin: 'B00INVAL…
       |                                       ^
    372| 
    373|     expect(error).toBeInstanceOf(ApiError);

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[25/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should validate inventory update parameters before making requests
TypeError: inventoryClient.updateInventory is not a function
 ❯ tests/unit/api/api-error-handling.test.ts:383:41
    381| 
    382|     const inventoryClient = new InventoryClient(TestDataBuilder.create…
    383|     const error = await inventoryClient.updateInventory({
       |                                         ^
    384|       sku: '',
    385|       quantity: -10,

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[26/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should validate listing creation parameters before making requests
TypeError: listingsClient.putListing is not a function
 ❯ tests/unit/api/api-error-handling.test.ts:397:40
    395| 
    396|     const listingsClient = new ListingsClient(TestDataBuilder.createAu…
    397|     const error = await listingsClient.putListing({
       |                                        ^
    398|       sku: '',
    399|       productType: '',

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[27/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should handle listing not found scenarios appropriately
TypeError: listingsClient.getListing is not a function
 ❯ tests/unit/api/api-error-handling.test.ts:411:40
    409| 
    410|     const listingsClient = new ListingsClient(TestDataBuilder.createAu…
    411|     const error = await listingsClient.getListing('NON-EXISTENT-SKU').…
       |                                        ^
    412| 
    413|     expect(error.message).toContain('not found');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[28/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should validate order shipping details before processing
TypeError: ordersClient.updateOrderStatus is not a function
 ❯ tests/unit/api/api-error-handling.test.ts:421:38
    419| 
    420|     const ordersClient = new OrdersClient(TestDataBuilder.createAuthCo…
    421|     const error = await ordersClient.updateOrderStatus({
       |                                      ^
    422|       amazonOrderId: 'TEST-ORDER-001',
    423|       action: 'SHIP',

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[29/67]⎯

 FAIL  tests/unit/api/api-error-handling.test.ts > API Error Handling > should validate order cancellation details before processing
TypeError: ordersClient.updateOrderStatus is not a function
 ❯ tests/unit/api/api-error-handling.test.ts:435:38
    433| 
    434|     const ordersClient = new OrdersClient(TestDataBuilder.createAuthCo…
    435|     const error = await ordersClient.updateOrderStatus({
       |                                      ^
    436|       amazonOrderId: 'TEST-ORDER-001',
    437|       action: 'CANCEL',

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[30/67]⎯

 FAIL  tests/unit/tools/orders-tools-fulfill.test.ts > Fulfill Order Tool > should handle fulfill order tool execution
AssertionError: expected '# Order Processing Result\n\n**Order …' to contain 'Order 123-4567890-1234567 has been fu…'

[32m- Expected[39m
[31m+ Received[39m

[32m- Order [7m123-4567890-1234567 has been fulfilled successfully[27m[39m
[31m+ [7m# [27mOrder [7mProcessing Result[27m[39m
[31m+[39m
[31m+ **Order ID:** 123-4567890-1234567[39m
[31m+[39m
[31m+ **Action:** undefined[39m
[31m+[39m
[31m+ **Status:** Success[39m
[31m+[39m
[31m+ Resource URI: amazon-orders://123-4567890-1234567[39m
[31m+[39m
[31m+[39m

 ❯ tests/unit/tools/orders-tools-fulfill.test.ts:65:36
     63|     expect(result.content[0].text).toContain('**Order ID:** 123-456789…
     64|     expect(result.content[0].text).toContain('**Status:** Success');
     65|     expect(result.content[0].text).toContain(
       |                                    ^
     66|       'Order 123-4567890-1234567 has been fulfilled successfully'
     67|     );

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[31/67]⎯

 FAIL  tests/unit/tools/orders-tools-fulfill.test.ts > Fulfill Order Tool > should validate ship date format
AssertionError: expected undefined to be true // Object.is equality

[32m- Expected:[39m 
true

[31m+ Received:[39m 
undefined

 ❯ tests/unit/tools/orders-tools-fulfill.test.ts:118:28
    116|     });
    117| 
    118|     expect(result.isError).toBe(true);
       |                            ^
    119|     expect(result.content[0].text).toContain('Error: Ship date must be…
    120| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[32/67]⎯

 FAIL  tests/unit/tools/orders-tools-fulfill.test.ts > Fulfill Order Tool > should handle errors when fulfilling an order
AssertionError: expected 'Error processing order: API error' to contain 'Error fulfilling order: API error'

Expected: [32m"Error [7mfulfill[27ming order: API error"[39m
Received: [31m"Error [7mprocess[27ming order: API error"[39m

 ❯ tests/unit/tools/orders-tools-fulfill.test.ts:175:36
    173| 
    174|     expect(result.isError).toBe(true);
    175|     expect(result.content[0].text).toContain('Error fulfilling order: …
       |                                    ^
    176|   });
    177| });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[33/67]⎯

 FAIL  tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should handle process order tool execution for CONFIRM action
AssertionError: expected '# Amazon Orders\n\n**Total Orders:** …' to contain '**Order ID:** 123-4567890-1234567'

[32m- Expected[39m
[31m+ Received[39m

[32m- [7m**[27mOrder[7m ID[27m:** [7m123-4567890-1234567[27m[39m
[31m+ # Amazon Orders[39m
[31m+[39m
[31m+ [7m**Total [27mOrder[7ms[27m:** [7m0[27m[39m
[31m+[39m
[31m+ No orders found matching the specified criteria.[39m
[31m+[39m
[31m+[39m

 ❯ tests/unit/tools/orders-tools-process.test.ts:49:36
     47| 
     48|     expect(result.content[0].type).toBe('text');
     49|     expect(result.content[0].text).toContain('**Order ID:** 123-456789…
       |                                    ^
     50|     expect(result.content[0].text).toContain('**Action:** CONFIRM');
     51|     expect(result.content[0].text).toContain('**Status:** Success');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[34/67]⎯

 FAIL  tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should handle process order tool execution for CANCEL action
AssertionError: expected '# Amazon Orders\n\n**Total Orders:** …' to contain '**Order ID:** 123-4567890-1234567'

[32m- Expected[39m
[31m+ Received[39m

[32m- [7m**[27mOrder[7m ID[27m:** [7m123-4567890-1234567[27m[39m
[31m+ # Amazon Orders[39m
[31m+[39m
[31m+ [7m**Total [27mOrder[7ms[27m:** [7m0[27m[39m
[31m+[39m
[31m+ No orders found matching the specified criteria.[39m
[31m+[39m
[31m+[39m

 ❯ tests/unit/tools/orders-tools-process.test.ts:82:36
     80| 
     81|     expect(result.content[0].type).toBe('text');
     82|     expect(result.content[0].text).toContain('**Order ID:** 123-456789…
       |                                    ^
     83|     expect(result.content[0].text).toContain('**Action:** CANCEL');
     84|     expect(result.content[0].text).toContain('**Status:** Success');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[35/67]⎯

 FAIL  tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should handle process order tool execution for SHIP action
AssertionError: expected '# Amazon Orders\n\n**Total Orders:** …' to contain '**Order ID:** 123-4567890-1234567'

[32m- Expected[39m
[31m+ Received[39m

[32m- [7m**[27mOrder[7m ID[27m:** [7m123-4567890-1234567[27m[39m
[31m+ # Amazon Orders[39m
[31m+[39m
[31m+ [7m**Total [27mOrder[7ms[27m:** [7m0[27m[39m
[31m+[39m
[31m+ No orders found matching the specified criteria.[39m
[31m+[39m
[31m+[39m

 ❯ tests/unit/tools/orders-tools-process.test.ts:128:36
    126| 
    127|     expect(result.content[0].type).toBe('text');
    128|     expect(result.content[0].text).toContain('**Order ID:** 123-456789…
       |                                    ^
    129|     expect(result.content[0].text).toContain('**Action:** SHIP');
    130|     expect(result.content[0].text).toContain('**Status:** Success');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[36/67]⎯

 FAIL  tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should validate CANCEL action requires cancellation reason
AssertionError: expected undefined to be true // Object.is equality

[32m- Expected:[39m 
true

[31m+ Received:[39m 
undefined

 ❯ tests/unit/tools/orders-tools-process.test.ts:169:28
    167|     });
    168| 
    169|     expect(result.isError).toBe(true);
       |                            ^
    170|     expect(result.content[0].text).toContain(
    171|       'Error: Cancellation reason is required for CANCEL action'

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[37/67]⎯

 FAIL  tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should validate SHIP action requires shipping details
AssertionError: expected undefined to be true // Object.is equality

[32m- Expected:[39m 
true

[31m+ Received:[39m 
undefined

 ❯ tests/unit/tools/orders-tools-process.test.ts:188:28
    186|     });
    187| 
    188|     expect(result.isError).toBe(true);
       |                            ^
    189|     expect(result.content[0].text).toContain(
    190|       'Error: Shipping details are required for SHIP action'

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[38/67]⎯

 FAIL  tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should handle failed order processing
AssertionError: expected '# Amazon Orders\n\n**Total Orders:** …' to contain '**Order ID:** 123-4567890-1234567'

[32m- Expected[39m
[31m+ Received[39m

[32m- [7m**[27mOrder[7m ID[27m:** [7m123-4567890-1234567[27m[39m
[31m+ # Amazon Orders[39m
[31m+[39m
[31m+ [7m**Total [27mOrder[7ms[27m:** [7m0[27m[39m
[31m+[39m
[31m+ No orders found matching the specified criteria.[39m
[31m+[39m
[31m+[39m

 ❯ tests/unit/tools/orders-tools-process.test.ts:213:36
    211| 
    212|     expect(result.content[0].type).toBe('text');
    213|     expect(result.content[0].text).toContain('**Order ID:** 123-456789…
       |                                    ^
    214|     expect(result.content[0].text).toContain('**Action:** CONFIRM');
    215|     expect(result.content[0].text).toContain('**Status:** Failed');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[39/67]⎯

 FAIL  tests/unit/tools/orders-tools-process.test.ts > Process Order Tool > should handle errors when processing an order
AssertionError: expected undefined to be true // Object.is equality

[32m- Expected:[39m 
true

[31m+ Received:[39m 
undefined

 ❯ tests/unit/tools/orders-tools-process.test.ts:231:28
    229|     });
    230| 
    231|     expect(result.isError).toBe(true);
       |                            ^
    232|     expect(result.content[0].text).toContain('Error processing order: …
    233|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[40/67]⎯

 FAIL  tests/unit/tools/orders-tools-update-status.test.ts > Update Order Status Tool > should handle update order status tool execution for CANCELED status
AssertionError: expected '# Amazon Order ORDER-123\n\n**Status:…' to contain '**Order ID:** 123-4567890-1234567'

[32m- Expected[39m
[31m+ Received[39m

[32m- **Order ID:** 123-4567890-1234567[39m
[31m+ # Amazon Order ORDER-123[39m
[31m+[39m
[31m+ **Status:** UNSHIPPED[39m
[31m+[39m
[31m+ **Purchase Date:** 2024-01-01T00:00:00Z[39m
[31m+[39m
[31m+ **Last Updated:** 2024-01-01T00:00:00Z[39m
[31m+[39m
[31m+ **Resource URI:** amazon-orders://ORDER-123[39m
[31m+[39m
[31m+[39m

 ❯ tests/unit/tools/orders-tools-update-status.test.ts:51:36
     49| 
     50|     expect(result.content[0].type).toBe('text');
     51|     expect(result.content[0].text).toContain('**Order ID:** 123-456789…
       |                                    ^
     52|     expect(result.content[0].text).toContain('**Requested Status:** CA…
     53|     expect(result.content[0].text).toContain('**Status:** Success');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[41/67]⎯

 FAIL  tests/unit/tools/orders-tools-update-status.test.ts > Update Order Status Tool > should handle update order status tool execution for UNSHIPPED status
AssertionError: expected '# Amazon Order ORDER-123\n\n**Status:…' to contain '**Order ID:** 123-4567890-1234567'

[32m- Expected[39m
[31m+ Received[39m

[32m- **Order ID:** 123-4567890-1234567[39m
[31m+ # Amazon Order ORDER-123[39m
[31m+[39m
[31m+ **Status:** UNSHIPPED[39m
[31m+[39m
[31m+ **Purchase Date:** 2024-01-01T00:00:00Z[39m
[31m+[39m
[31m+ **Last Updated:** 2024-01-01T00:00:00Z[39m
[31m+[39m
[31m+ **Resource URI:** amazon-orders://ORDER-123[39m
[31m+[39m
[31m+[39m

 ❯ tests/unit/tools/orders-tools-update-status.test.ts:85:36
     83| 
     84|     expect(result.content[0].type).toBe('text');
     85|     expect(result.content[0].text).toContain('**Order ID:** 123-456789…
       |                                    ^
     86|     expect(result.content[0].text).toContain('**Requested Status:** UN…
     87|     expect(result.content[0].text).toContain('**Status:** Success');

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[42/67]⎯

 FAIL  tests/unit/tools/orders-tools-update-status.test.ts > Update Order Status Tool > should reject unsupported status updates
AssertionError: expected undefined to be true // Object.is equality

[32m- Expected:[39m 
true

[31m+ Received:[39m 
undefined

 ❯ tests/unit/tools/orders-tools-update-status.test.ts:110:28
    108|     });
    109| 
    110|     expect(result.isError).toBe(true);
       |                            ^
    111|     expect(result.content[0].text).toContain(
    112|       'To mark an order as shipped, please use the process-order tool …

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[43/67]⎯

 FAIL  tests/unit/tools/orders-tools-update-status.test.ts > Update Order Status Tool > should handle errors when updating order status
AssertionError: expected undefined to be true // Object.is equality

[32m- Expected:[39m 
true

[31m+ Received:[39m 
undefined

 ❯ tests/unit/tools/orders-tools-update-status.test.ts:131:28
    129|     });
    130| 
    131|     expect(result.isError).toBe(true);
       |                            ^
    132|     expect(result.content[0].text).toContain('Error updating order sta…
    133|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[44/67]⎯

 FAIL  tests/unit/server/notification-delivery.test.ts > Notification Delivery > should allow removing specific listeners
AssertionError: expected "spy" to be called 1 times, but got 0 times
 ❯ tests/unit/server/notification-delivery.test.ts:289:23
    287|     notificationManager.sendInventoryChangeNotification(firstChange);
    288| 
    289|     expect(listener1).toHaveBeenCalledTimes(1);
       |                       ^
    290|     expect(listener2).toHaveBeenCalledTimes(1);
    291| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[45/67]⎯

 FAIL  tests/utils/mock-factories/api-client-factory.test.ts > ListingsClientMockFactory > create > should setup default behaviors
AssertionError: expected { listings: [], nextToken: null } to deeply equal []

[32m- Expected:[39m 
[]

[31m+ Received:[39m 
{
  "listings": [],
  "nextToken": null,
}

 ❯ tests/utils/mock-factories/api-client-factory.test.ts:245:24
    243|     it('should setup default behaviors', async () => {
    244|       const listings = await mockClient.getListings({});
    245|       expect(listings).toEqual([]);
       |                        ^
    246| 
    247|       const listing = await mockClient.getListing({ sku: 'TEST-SKU' });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[46/67]⎯


 Test Files  9 failed | 57 passed (66)
      Tests  45 failed | 633 passed | 2 skipped (680)
   Start at  21:14:51
   Duration  7.32s (transform 1.65s, setup 0ms, collect 10.55s, tests 13.05s, environment 7ms, prepare 3.53s)

JSON report written to /Users/eterzi/kiro-projects/amazon-seller-mcp/test-results/results.json
 HTML  Report is generated
       You can run npx vite preview --outDir test-results to see the test results.
