#!/bin/sh
#
# Pre-commit hook for comprehensive quality validation
# Enforces zero lint errors, successful build, and passing tests
#

echo "üîç Running pre-commit quality validation..."

# Track overall success
OVERALL_SUCCESS=1

# Function to run a check and report results with retry logic
run_check() {
    local check_name="$1"
    local command="$2"
    local required="$3"
    local max_retries="${4:-1}"
    
    echo "  ‚Üí $check_name..."
    
    local attempt=1
    while [ $attempt -le $max_retries ]; do
        if [ $attempt -gt 1 ]; then
            echo "    üîÑ Retry attempt $attempt/$max_retries..."
            # Add delay between retries to allow port cleanup
            sleep 2
        fi
        
        if eval "$command" > /dev/null 2>&1; then
            echo "    ‚úÖ $check_name passed"
            return 0
        fi
        
        attempt=$((attempt + 1))
    done
    
    echo "    ‚ùå $check_name failed after $max_retries attempts"
    if [ "$required" = "true" ]; then
        OVERALL_SUCCESS=0
    fi
    return 1
}

# Function to run tests with better error handling
run_tests_with_retry() {
    local max_attempts=3
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        echo "  ‚Üí Test execution (attempt $attempt/$max_attempts)..."
        
        # Kill any lingering processes that might be holding ports
        pkill -f "node.*vitest" 2>/dev/null || true
        pkill -f "node.*test" 2>/dev/null || true
        
        # Wait for processes to fully terminate
        sleep 1
        
        # Run tests and capture output (without timeout for macOS compatibility)
        if npm test > /tmp/test-output.log 2>&1; then
            echo "    ‚úÖ Tests passed"
            return 0
        else
            local exit_code=$?
            echo "    ‚ùå Tests failed (exit code: $exit_code)"
            
            # Check if it's a port conflict issue
            if grep -q "EADDRINUSE\|address already in use" /tmp/test-output.log; then
                echo "    üîÑ Port conflict detected, retrying..."
                # Clean up any remaining processes
                pkill -f "node.*vitest" 2>/dev/null || true
                pkill -f "node.*test" 2>/dev/null || true
                sleep 3
            elif grep -q "Test timed out\|Hook timed out" /tmp/test-output.log; then
                echo "    ‚è±Ô∏è  Test timeout detected, retrying..."
                sleep 2
            else
                echo "    üí° Non-recoverable test failure detected"
                break
            fi
        fi
        
        attempt=$((attempt + 1))
    done
    
    echo "    ‚ùå Tests failed after $max_attempts attempts"
    echo "    üìã Last test output:"
    tail -20 /tmp/test-output.log | sed 's/^/      /'
    return 1
}

# 1. Lint validation (MANDATORY - zero errors required)
echo "üîß Validating code quality..."
if ! run_check "ESLint validation" "npm run lint" "true"; then
    echo "    üí° Fix lint errors with: npm run lint -- --fix"
    echo "    üí° Or format code with: npm run format"
fi

# 2. TypeScript compilation (MANDATORY - build must succeed)
echo "üèóÔ∏è  Validating TypeScript compilation..."
if ! run_check "TypeScript build" "npm run build" "true"; then
    echo "    üí° Fix TypeScript errors before committing"
fi

# 3. Test execution with retry logic (MANDATORY - all tests must pass)
echo "üß™ Validating test suite..."
if ! run_tests_with_retry; then
    echo "    üí° Fix failing tests before committing"
    echo "    üí° Run tests with: npm test"
    echo "    üí° For port conflicts, try: pkill -f node && npm test"
    OVERALL_SUCCESS=0
fi

# 4. Code formatting check
echo "üé® Validating code formatting..."
if ! run_check "Prettier formatting" "npm run format -- --check" "false"; then
    echo "    üí° Auto-format code with: npm run format"
    # Auto-format if possible
    echo "    üîß Auto-formatting code..."
    if npm run format > /dev/null 2>&1; then
        echo "    ‚úÖ Code formatted automatically"
    fi
fi

# 5. Basic health check (WARNING - not blocking)
echo "üè• Running basic health check..."
if ! run_check "Basic health validation" "npm run test:pre-commit-check" "false"; then
    echo "    ‚ö†Ô∏è  Health check completed with warnings (non-blocking)"
    echo "    üí° Run 'npm run test:maintenance health-check' for detailed analysis"
fi

# Cleanup any remaining test processes
pkill -f "node.*vitest" 2>/dev/null || true
pkill -f "node.*test" 2>/dev/null || true

# Final validation
if [ $OVERALL_SUCCESS -eq 0 ]; then
    echo ""
    echo "‚ùå Pre-commit validation failed!"
    echo ""
    echo "The following quality gates must pass before committing:"
    echo "  ‚Ä¢ Zero lint errors (npm run lint)"
    echo "  ‚Ä¢ Successful TypeScript build (npm run build)"
    echo "  ‚Ä¢ All tests passing (npm test)"
    echo ""
    echo "üîß Common fixes:"
    echo "  ‚Ä¢ For lint errors: npm run lint -- --fix"
    echo "  ‚Ä¢ For formatting: npm run format"
    echo "  ‚Ä¢ For port conflicts: pkill -f node && npm test"
    echo "  ‚Ä¢ For test issues: npm run test:maintenance health-check"
    echo ""
    echo "üí° To skip these checks (not recommended): git commit --no-verify"
    echo ""
    exit 1
fi

echo ""
echo "‚úÖ All quality gates passed! Proceeding with commit..."
echo ""