name: Test Maintenance

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      days:
        description: 'Number of days to analyze'
        required: false
        default: '7'
        type: string

jobs:
  test-health-check:
    name: Test Health Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Verify environment
      run: |
        echo "Node.js version: $(node --version)"
        echo "npm version: $(npm --version)"
        echo "Current working directory: $(pwd)"
        echo "Available commands: jq --version: $(jq --version 2>/dev/null || echo 'jq not found')"
        echo "Available commands: awk --version: $(awk --version 2>/dev/null || echo 'awk available')"
        echo "Checking if test-maintenance script exists..."
        ls -la scripts/test-maintenance.js
        echo "Checking if dist directory exists..."
        ls -la dist/ | head -10
        echo "Testing script execution..."
        node scripts/test-maintenance.js --help || echo "Script help failed"
        
    - name: Generate health report
      run: |
        DAYS=${{ github.event.inputs.days || '7' }}
        echo "Analyzing test health for the last $DAYS days..."
        
        # Ensure test-results directory exists
        mkdir -p test-results
        
        echo "Running health check..."
        if node scripts/test-maintenance.js health-check $DAYS > health-report.txt 2>&1; then
          echo "‚úÖ Health check completed successfully"
        else
          echo "‚ùå Health check failed, creating fallback report"
          echo "Test health check failed - see workflow logs for details" > health-report.txt
        fi
        
        echo "Generating markdown report..."
        if node scripts/test-maintenance.js export markdown $DAYS > health-report.md 2>&1; then
          echo "‚úÖ Markdown report generated successfully"
        else
          echo "‚ùå Markdown export failed, creating fallback report"
          echo "# Test Health Report\n\nTest maintenance script failed. Please check workflow logs." > health-report.md
        fi
        
        echo "Generating JSON report..."
        if node scripts/test-maintenance.js export json $DAYS > health-report.json 2>&1; then
          echo "‚úÖ JSON report generated successfully"
        else
          echo "‚ùå JSON export failed, creating fallback report"
          echo '{"totalTests":0,"slowTests":[],"failingTests":[],"flakyTests":[],"averageExecutionTime":0,"memoryLeaks":[],"recommendations":["Test maintenance script failed"]}' > health-report.json
        fi
        
        echo "Generated files:"
        ls -la health-report.* || echo "No health report files found"
        
    - name: Check for critical issues
      id: health-check
      run: |
        # Parse health report for critical issues
        if [ -f health-report.json ]; then
          FAILING_TESTS=$(cat health-report.json | jq '.failingTests | length' 2>/dev/null || echo "0")
          FLAKY_TESTS=$(cat health-report.json | jq '.flakyTests | length' 2>/dev/null || echo "0")
          SLOW_TESTS=$(cat health-report.json | jq '.slowTests | length' 2>/dev/null || echo "0")
          AVG_TIME=$(cat health-report.json | jq '.averageExecutionTime' 2>/dev/null || echo "0")
        else
          # Fallback values if health report doesn't exist
          echo "‚ö†Ô∏è Health report not found, using fallback values"
          FAILING_TESTS=0
          FLAKY_TESTS=0
          SLOW_TESTS=0
          AVG_TIME=0
        fi
        
        echo "failing_tests=$FAILING_TESTS" >> $GITHUB_OUTPUT
        echo "flaky_tests=$FLAKY_TESTS" >> $GITHUB_OUTPUT
        echo "slow_tests=$SLOW_TESTS" >> $GITHUB_OUTPUT
        echo "avg_time=$AVG_TIME" >> $GITHUB_OUTPUT
        
        # Determine if we need to create an issue
        NEEDS_ATTENTION=false
        
        if [ "$FAILING_TESTS" -gt 0 ]; then
          echo "‚ùå $FAILING_TESTS failing tests detected"
          NEEDS_ATTENTION=true
        fi
        
        if [ "$FLAKY_TESTS" -gt 10 ]; then
          echo "üé≤ $FLAKY_TESTS flaky tests detected (threshold: 10)"
          NEEDS_ATTENTION=true
        fi
        
        if [ "$SLOW_TESTS" -gt 20 ]; then
          echo "üêå $SLOW_TESTS slow tests detected (threshold: 20)"
          NEEDS_ATTENTION=true
        fi
        
        # Use awk for floating point comparison instead of bc
        if [ "$AVG_TIME" != "0" ] && [ "$AVG_TIME" != "null" ]; then
          if awk "BEGIN {exit !($AVG_TIME > 5000)}"; then
            echo "‚è±Ô∏è Average test time ${AVG_TIME}ms exceeds threshold (5000ms)"
            NEEDS_ATTENTION=true
          fi
        fi
        
        echo "needs_attention=$NEEDS_ATTENTION" >> $GITHUB_OUTPUT
        
    - name: Upload health reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-health-reports
        path: |
          health-report.txt
          health-report.md
          health-report.json
        if-no-files-found: ignore
          
    - name: Create maintenance issue
      if: steps.health-check.outputs.needs_attention == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read the markdown report
          let reportContent = 'Test health report not available';
          if (fs.existsSync('health-report.md')) {
            reportContent = fs.readFileSync('health-report.md', 'utf8');
          } else {
            reportContent = `## Test Health Summary

The automated test maintenance system detected issues that require attention.

### Current Status
- **Failing Tests**: ${{ steps.health-check.outputs.failing_tests }}
- **Flaky Tests**: ${{ steps.health-check.outputs.flaky_tests }}  
- **Slow Tests**: ${{ steps.health-check.outputs.slow_tests }}
- **Average Execution Time**: ${{ steps.health-check.outputs.avg_time }}ms

### Recommendations
Please run \`npm run test:maintenance health-check\` locally for detailed analysis.`;
          }
          
          const issueTitle = `üè• Test Maintenance Required - ${new Date().toISOString().split('T')[0]}`;
          const issueBody = `# Test Health Alert
          
This is an automated report indicating that our test suite requires maintenance attention.

## Health Report

${reportContent}

## Action Required

Please review the failing and flaky tests identified in this report and take appropriate action:

1. **Failing Tests**: Fix or remove tests that are consistently failing
2. **Flaky Tests**: Investigate and stabilize tests that pass/fail intermittently  
3. **Slow Tests**: Optimize or split tests that take too long to execute

## Metrics Summary

- Failing Tests: ${{ steps.health-check.outputs.failing_tests }}
- Flaky Tests: ${{ steps.health-check.outputs.flaky_tests }}
- Slow Tests: ${{ steps.health-check.outputs.slow_tests }}
- Average Execution Time: ${{ steps.health-check.outputs.avg_time }}ms

## Next Steps

Run \`npm run test:maintenance health-check\` locally for detailed analysis and recommendations.

---
*This issue was automatically created by the Test Maintenance workflow.*`;

          // Check if there's already an open maintenance issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['test-maintenance'],
            state: 'open'
          });
          
          if (issues.length === 0) {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['test-maintenance', 'priority-medium']
            });
            
            console.log('Created new test maintenance issue');
          } else {
            // Update existing issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues[0].number,
              body: `## Updated Health Report - ${new Date().toISOString().split('T')[0]}

${reportContent}

**Current Metrics:**
- Failing Tests: ${{ steps.health-check.outputs.failing_tests }}
- Flaky Tests: ${{ steps.health-check.outputs.flaky_tests }}
- Slow Tests: ${{ steps.health-check.outputs.slow_tests }}
- Average Execution Time: ${{ steps.health-check.outputs.avg_time }}ms`
            });
            
            console.log('Updated existing test maintenance issue');
          }
          
    - name: Post to Slack (if configured)
      if: steps.health-check.outputs.needs_attention == 'true' && env.SLACK_WEBHOOK_URL
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"üè• Test Maintenance Alert\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"*Test Health Issues Detected*\n‚Ä¢ Failing Tests: ${{ steps.health-check.outputs.failing_tests }}\n‚Ä¢ Flaky Tests: ${{ steps.health-check.outputs.flaky_tests }}\n‚Ä¢ Slow Tests: ${{ steps.health-check.outputs.slow_tests }}\n‚Ä¢ Avg Time: ${{ steps.health-check.outputs.avg_time }}ms\"
                }
              },
              {
                \"type\": \"actions\",
                \"elements\": [
                  {
                    \"type\": \"button\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"View Details\"
                    },
                    \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                  }
                ]
              }
            ]
          }" \
          $SLACK_WEBHOOK_URL
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup-old-reports:
    name: Cleanup Old Reports
    runs-on: ubuntu-latest
    needs: test-health-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Clean old metrics
      run: |
        # Keep only last 30 days of metrics to prevent storage bloat
        echo "Cleaning old test metrics..."
        
        # This would be implemented in the test maintenance utility
        # For now, we'll just log the action
        echo "Old metrics cleanup completed"