name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate CI environment
      run: npm run ci:validate-env
      
    - name: Run linting (MANDATORY - Zero errors allowed)
      run: |
        echo "🔍 Running ESLint validation..."
        npm run lint
        echo "✅ Lint validation passed - zero errors detected"
      
    - name: Run code formatting check (MANDATORY)
      run: |
        echo "🎨 Checking code formatting..."
        npm run format -- --check
        echo "✅ Code formatting validation passed"
      
    - name: Run TypeScript compilation (MANDATORY)
      run: |
        echo "🏗️ Running TypeScript compilation..."
        npm run build
        echo "✅ TypeScript build successful"
      
    - name: Run tests with coverage (MANDATORY - 100% pass rate required)
      run: |
        echo "🧪 Running test suite with coverage..."
        npm run test:coverage:threshold
        echo "✅ All tests passed with required coverage"
      
    - name: Enforce coverage thresholds (MANDATORY)
      run: |
        echo "📊 Enforcing coverage thresholds..."
        
        # Check if coverage file exists
        if [ ! -f coverage/coverage-summary.json ]; then
          echo "❌ Coverage report not found!"
          exit 1
        fi
        
        # Extract coverage percentages using node instead of jq for better compatibility
        node -e "
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
          const { lines, functions, branches, statements } = coverage.total;
          
          console.log('Coverage Summary:');
          console.log(\`Lines: \${lines.pct}%\`);
          console.log(\`Functions: \${functions.pct}%\`);
          console.log(\`Branches: \${branches.pct}%\`);
          console.log(\`Statements: \${statements.pct}%\`);
          
          let failed = false;
          
          if (lines.pct < 80) {
            console.log(\`❌ Line coverage \${lines.pct}% is below threshold (80%)\`);
            failed = true;
          }
          
          if (functions.pct < 80) {
            console.log(\`❌ Function coverage \${functions.pct}% is below threshold (80%)\`);
            failed = true;
          }
          
          if (branches.pct < 75) {
            console.log(\`❌ Branch coverage \${branches.pct}% is below threshold (75%)\`);
            failed = true;
          }
          
          if (statements.pct < 80) {
            console.log(\`❌ Statement coverage \${statements.pct}% is below threshold (80%)\`);
            failed = true;
          }
          
          if (failed) {
            console.log('❌ Quality gate failed: Coverage thresholds not met');
            process.exit(1);
          } else {
            console.log('✅ All coverage thresholds met');
          }
        "
      
    - name: Perform test health check (WARNING - Non-blocking)
      run: |
        echo "🏥 Running test health check..."
        npm run test:quick-check || echo "⚠️ Test health issues detected (non-blocking)"
      continue-on-error: true
      
    - name: Upload coverage reports to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        
    - name: Upload coverage to Coveralls
      if: matrix.node-version == '20.x'
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ./coverage/lcov.info
        
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
          
  quality-gate:
    name: Quality Gate Enforcement
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-results-20.x
        
    - name: Validate test job success
      run: |
        echo "🔍 Validating test job results..."
        
        # Check if test job succeeded
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "❌ Test job failed - Quality gate cannot pass"
          echo "Test job result: ${{ needs.test.result }}"
          exit 1
        fi
        
        echo "✅ Test job completed successfully"
        
    - name: Enforce strict quality thresholds
      run: |
        echo "📊 Enforcing strict quality thresholds..."
        
        # Ensure coverage report exists
        if [ ! -f coverage/coverage-summary.json ]; then
          echo "❌ Coverage report not found - Quality gate failed"
          exit 1
        fi
        
        # Use Node.js for reliable JSON parsing (no external dependencies)
        node -e "
          const fs = require('fs');
          
          try {
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const { lines, functions, branches, statements } = coverage.total;
            
            console.log('📊 Coverage Analysis:');
            console.log(\`  Lines: \${lines.pct}% (threshold: 80%)\`);
            console.log(\`  Functions: \${functions.pct}% (threshold: 80%)\`);
            console.log(\`  Branches: \${branches.pct}% (threshold: 75%)\`);
            console.log(\`  Statements: \${statements.pct}% (threshold: 80%)\`);
            console.log('');
            
            let failed = false;
            const failures = [];
            
            if (lines.pct < 80) {
              failures.push(\`Line coverage \${lines.pct}% < 80%\`);
              failed = true;
            }
            
            if (functions.pct < 80) {
              failures.push(\`Function coverage \${functions.pct}% < 80%\`);
              failed = true;
            }
            
            if (branches.pct < 75) {
              failures.push(\`Branch coverage \${branches.pct}% < 75%\`);
              failed = true;
            }
            
            if (statements.pct < 80) {
              failures.push(\`Statement coverage \${statements.pct}% < 80%\`);
              failed = true;
            }
            
            if (failed) {
              console.log('❌ QUALITY GATE FAILED');
              console.log('');
              console.log('Coverage threshold violations:');
              failures.forEach(failure => console.log(\`  • \${failure}\`));
              console.log('');
              console.log('🔧 To fix:');
              console.log('  1. Add more tests to increase coverage');
              console.log('  2. Remove dead code that cannot be tested');
              console.log('  3. Run: npm run test:coverage to see detailed report');
              process.exit(1);
            } else {
              console.log('✅ All coverage thresholds met');
              console.log(\`📈 Overall coverage: \${Math.round((lines.pct + functions.pct + branches.pct + statements.pct) / 4)}%\`);
            }
          } catch (error) {
            console.log('❌ Error parsing coverage report:', error.message);
            process.exit(1);
          }
        "
        
    - name: Validate zero lint errors
      run: |
        echo "🔍 Validating lint compliance..."
        
        # Run lint check to ensure zero errors
        if npm run lint > lint-output.txt 2>&1; then
          echo "✅ Zero lint errors confirmed"
        else
          echo "❌ Lint errors detected:"
          cat lint-output.txt
          echo ""
          echo "🔧 Fix lint errors before merge"
          exit 1
        fi
        
    - name: Validate build success
      run: |
        echo "🏗️ Validating build success..."
        
        # Ensure TypeScript build succeeds
        if npm run build > build-output.txt 2>&1; then
          echo "✅ Build successful"
        else
          echo "❌ Build failed:"
          cat build-output.txt
          echo ""
          echo "🔧 Fix build errors before merge"
          exit 1
        fi
        
    - name: Validate 100% test pass rate
      run: |
        echo "🧪 Validating test pass rate..."
        
        # Run tests and capture results
        if npm test > test-output.txt 2>&1; then
          echo "✅ 100% test pass rate confirmed"
        else
          echo "❌ Test failures detected:"
          cat test-output.txt
          echo ""
          echo "🔧 Fix failing tests before merge"
          exit 1
        fi
        
    - name: Generate test health report
      run: |
        npm run test:maintenance health-check 1 > test-health.txt || true
        if [ -f test-health.txt ]; then
          echo "## 🏥 Test Health Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat test-health.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Check for test maintenance issues
      run: |
        # Run maintenance check and capture output
        npm run test:maintenance export json > health-report.json || true
        
        if [ -f health-report.json ]; then
          # Extract key metrics using jq
          SLOW_TESTS=$(cat health-report.json | jq '.slowTests | length' 2>/dev/null || echo "0")
          FAILING_TESTS=$(cat health-report.json | jq '.failingTests | length' 2>/dev/null || echo "0")
          FLAKY_TESTS=$(cat health-report.json | jq '.flakyTests | length' 2>/dev/null || echo "0")
          
          echo "Test Health Metrics:"
          echo "- Slow tests: $SLOW_TESTS"
          echo "- Failing tests: $FAILING_TESTS"
          echo "- Flaky tests: $FLAKY_TESTS"
          
          # Set warning thresholds
          if [ "$SLOW_TESTS" -gt 10 ]; then
            echo "⚠️ Warning: $SLOW_TESTS slow tests detected (threshold: 10)"
          fi
          
          if [ "$FLAKY_TESTS" -gt 5 ]; then
            echo "⚠️ Warning: $FLAKY_TESTS flaky tests detected (threshold: 5)"
          fi
        fi
        
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          if (!fs.existsSync('coverage/coverage-summary.json')) {
            return;
          }
          
          const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
          const { lines, functions, branches, statements } = coverage.total;
          
          const body = `## 📊 Test Coverage Report
          
          | Metric | Coverage | Threshold | Status |
          |--------|----------|-----------|--------|
          | Lines | ${lines.pct}% | 80% | ${lines.pct >= 80 ? '✅' : '❌'} |
          | Functions | ${functions.pct}% | 80% | ${functions.pct >= 80 ? '✅' : '❌'} |
          | Branches | ${branches.pct}% | 75% | ${branches.pct >= 75 ? '✅' : '❌'} |
          | Statements | ${statements.pct}% | 80% | ${statements.pct >= 80 ? '✅' : '❌'} |
          
          **Total Coverage:** ${Math.round((lines.pct + functions.pct + branches.pct + statements.pct) / 4)}%
          
          ${lines.pct >= 80 && functions.pct >= 80 && branches.pct >= 75 && statements.pct >= 80 
            ? '🎉 All coverage thresholds met!' 
            : '⚠️ Some coverage thresholds not met. Please add more tests.'}
          `;
          
          // Add test health information if available
          try {
            const { execSync } = require('child_process');
            const healthOutput = execSync('npm run test:maintenance export json', { encoding: 'utf8' });
            const healthData = JSON.parse(healthOutput);
            
            if (healthData.slowTests?.length > 0 || healthData.flakyTests?.length > 0) {
              body += `\n\n## 🏥 Test Health Alert\n\n`;
              
              if (healthData.slowTests?.length > 0) {
                body += `⚠️ **${healthData.slowTests.length} slow tests** detected\n`;
              }
              
              if (healthData.flakyTests?.length > 0) {
                body += `⚠️ **${healthData.flakyTests.length} flaky tests** detected\n`;
              }
              
              body += `\nRun \`npm run test:maintenance health-check\` for detailed analysis.`;
            }
          } catch (error) {
            // Ignore errors in health reporting
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [test, quality-gate]
    # Only run if both test and quality-gate jobs succeeded
    if: needs.test.result == 'success' && needs.quality-gate.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Final quality validation
      run: |
        echo "🔍 Running final quality validation before build..."
        
        # Ensure all quality gates still pass
        echo "  → Lint check..."
        npm run lint
        
        echo "  → Format check..."
        npm run format -- --check
        
        echo "  → Test execution..."
        npm test
        
        echo "✅ All quality gates passed - proceeding with build"
      
    - name: Build package
      run: |
        echo "🏗️ Building package..."
        npm run build
        echo "✅ Package built successfully"
      
    - name: Generate documentation
      run: |
        echo "📚 Generating documentation..."
        npm run build:docs
        echo "✅ Documentation generated successfully"
      
    - name: Validate build artifacts
      run: |
        echo "🔍 Validating build artifacts..."
        
        # Check that dist directory exists and has content
        if [ ! -d "dist" ]; then
          echo "❌ dist directory not found"
          exit 1
        fi
        
        if [ ! -f "dist/index.js" ]; then
          echo "❌ Main build output not found"
          exit 1
        fi
        
        if [ ! -f "dist/index.d.ts" ]; then
          echo "❌ TypeScript declarations not found"
          exit 1
        fi
        
        echo "✅ Build artifacts validated"
      
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          docs/
          
    - name: Build success summary
      run: |
        echo "🎉 Build completed successfully!"
        echo ""
        echo "✅ Quality gates enforced:"
        echo "  • Zero lint errors"
        echo "  • 100% test pass rate"
        echo "  • 80% line coverage, 75% branch coverage"
        echo "  • Successful TypeScript build"
        echo "  • Proper code formatting"
        echo ""
        echo "📦 Artifacts generated:"
        echo "  • Compiled JavaScript (dist/)"
        echo "  • TypeScript declarations (dist/*.d.ts)"
        echo "  • Documentation (docs/)"